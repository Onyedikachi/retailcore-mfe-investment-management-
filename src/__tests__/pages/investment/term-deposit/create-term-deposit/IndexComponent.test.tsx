import { getByText, screen } from "@testing-library/dom";
import { renderWithProviders } from "../../../../../__mocks__/api/Wrapper";
import IndexComponent, {
  handleNext,
  handlePrev,
} from "../../../../../pages/investment/term-deposit/create-term-deposit/IndexComponent";
import React from "react";
import CreateTermDeposit from "../../../../../pages/investment/term-deposit/create-term-deposit/IndexComponent";
import { fireEvent, render } from "@testing-library/react";

jest.mock("react-router-dom", () => ({
  BrowserRouter: ({ children }) => <div>{children}</div>,
  Link: ({ to, children }) => <a href={to}>{children}</a>,
  useNavigate: jest.fn(),
  useSearchParams: jest.fn(),
  useParams: jest.fn(),
}));
jest.mock("../../../../../components/pages/term-deposit/forms", () => ({
  ProductInformation: () => <div>Product information</div>,
  CustomerEligibilityCriteria: () => <div>CustomerEligibilityCriteria</div>,
  AccountingEntriesAndEvents: () => <div>AccountingEntriesAndEvents</div>,
  LiquiditySetup: () => <div>LiquiditySetup</div>,
  PricingConfig: () => <div>PricingConfig</div>,
}));
describe("IndexComponent", () => {
  beforeEach(() => {
    jest
      .spyOn(require("react-router-dom"), "useSearchParams")
      .mockReturnValue([
        new URLSearchParams({ sub_type: "", filter: "", id: "" }),
      ]);

    jest
      .spyOn(require("react-router-dom"), "useParams")
      .mockReturnValue({ process: "continue" });
  });
  it("renders", () => {
    renderWithProviders(<IndexComponent />);
    expect(screen.getByText("New Term Deposit Product")).toBeInTheDocument();
    expect(screen.getAllByTestId("form-step").length).toBeGreaterThan(1);
  });
});

describe("handlePrev", () => {
  // When the current step is greater than the first step, the function should decrement the step by 1 and update the state using the setStep function.
  it("should decrement the step by 1 and update the state when the current step is greater than the first step", () => {
    const step = 2;
    const setStep = jest.fn();
    const termDepositFormSteps = [{ index: 1 }];

    handlePrev(step, setStep, termDepositFormSteps);

    expect(setStep).toHaveBeenCalledWith(1);
  });

  // When the current step is equal to the first step, the function should not update the step and state.
  it("should not update the step and state when the current step is equal to the first step", () => {
    const step = 1;
    const setStep = jest.fn();
    const termDepositFormSteps = [{ index: 1 }];

    handlePrev(step, setStep, termDepositFormSteps);

    expect(setStep).not.toHaveBeenCalled();
  });
});

// Generated by CodiumAI

describe("handleNext", () => {
  // When given a valid step number less than the total number of steps, it should increment the step by 1.
  it("should increment the step by 1 when given a valid step number less than the total number of steps", () => {
    const step = 0;
    const setStep = jest.fn();
    const termDepositFormSteps = [1, 2, 3, 4];

    handleNext(step, setStep, termDepositFormSteps);

    expect(setStep).toHaveBeenCalledWith(step + 1);
  });

  // When given the last step number, it should not increment the step.
  it("should not increment the step when given the last step number", () => {
    const step = 3;
    const setStep = jest.fn();
    const termDepositFormSteps = [1, 2, 3, 4];

    handleNext(step, setStep, termDepositFormSteps);

    expect(setStep).toHaveBeenCalled();
  });

  // When given a step number greater than the total number of steps, it should not increment the step.
  it("should not increment the step when given a step number greater than the total number of steps", () => {
    const step = 5;
    const setStep = jest.fn();
    const termDepositFormSteps = [1, 2, 3, 4];

    handleNext(step, setStep, termDepositFormSteps);

    expect(setStep).not.toHaveBeenCalled();
  });


  // When given a non-numeric step, it should not increment the step.
  it("should not increment the step when given a non-numeric step", () => {
    const step = "invalid";
    const setStep = jest.fn();
    const termDepositFormSteps = [1, 2, 3, 4];

    handleNext(step, setStep, termDepositFormSteps);

    expect(setStep).not.toHaveBeenCalled();
  });

  // It should not modify any other state or variable besides the step.
  it("should not modify any other state or variable besides the step", () => {
    const step = 0;
    const setStep = jest.fn();
    const termDepositFormSteps = [1, 2, 3, 4];

    handleNext(step, setStep, termDepositFormSteps);

    expect(setStep).toHaveBeenCalledTimes(1);
    expect(setStep).toHaveBeenCalledWith(step + 1);
  });
});


