import React from "react";
import { render } from "@testing-library/react";
import { MemoryRouter, Outlet } from "react-router-dom";
import AuthGaurd from "../../layouts/AuthGuard";
import Layout, { checkPermissions, handleRole } from "../../layouts/Layout";
import { renderWithProviders } from "../../__mocks__/api/Wrapper";
import { RequiredInvestmentPermissions } from "../../constants/investment"

jest.mock("react-router-dom", () => ({
  BrowserRouter: ({ children }) => <div>{children}</div>,
  Routes: ({ children }) => <div>{children}</div>,
  Route: ({ element }) => element,
}));

jest.mock("../../layouts/AuthGuard", () => ({
  __esModule: true,
  default: jest.fn(({ children }) => children),
}));

jest.mock("react-router-dom", () => ({
  Outlet: jest.fn(() => null),
}));

describe("Layout", () => {
  it("renders AuthGuard and Outlet components", () => {
    const { getByTestId } = renderWithProviders(<Layout />);

    const outletElement = getByTestId("outlet");
    expect(outletElement).toBeInTheDocument();
  });
});


describe('handleRole', () => {

  it('should handle cases where is_superuser property is not a boolean', () => {
    const setRole = jest.fn();
    const value = {
      user: {
        is_superuser: true
      }
    };
    handleRole(setRole, value);
    expect(setRole).toHaveBeenCalledWith('superadmin');
  });
  // Tests that the function handles cases where the 'is_superuser' property is not a boolean
  it('should handle cases where is_superuser property is not a boolean', () => {
    const setRole = jest.fn();
    const value = {
      user: {
        is_superuser: "true"
      }
    };
    handleRole(setRole, value);
    expect(setRole).toHaveBeenCalledWith('superadmin');
  });

  // Tests that the function handles cases where the 'is_superuser' property is not present in the 'user' object
  it('should handle cases where is_superuser property is not present in user object', () => {
    const setRole = jest.fn();
    const value = {
      user: {}
    };
    handleRole(setRole, value);
    expect(setRole).toHaveBeenCalledWith('admin');
  });
});

// Generated by CodiumAI

describe('checkPermissions', () => {

  // Given a user with all required investment permissions, when calling checkPermissions, then it should not redirect and set the user's permissions
  it('should not redirect and set permissions when user has all required investment permissions', () => {
    const value = {
      user: {
        user_permissions: RequiredInvestmentPermissions
      }
    };
    const setRole = jest.fn();
    const setPermissions = jest.fn();
    const userId = { current: null };
    const handleRole = jest.fn();

    checkPermissions({ value, setRole, setPermissions, userId, handleRole });

    expect(setPermissions).toHaveBeenCalledWith(RequiredInvestmentPermissions);
    expect(setRole).not.toHaveBeenCalled();
    expect(handleRole).toHaveBeenCalled();
  });

  // Given a user with some required investment permissions, when calling checkPermissions, then it should not redirect and set the user's permissions
  it('should not redirect and set permissions when user has some required investment permissions', () => {
    const value = {
      user: {
        user_permissions: ["CREATE_INVESTMENT_PRODUCT", "VIEW_ALL_INVESTMENT_PRODUCT_RECORDS"]
      }
    };
    const setRole = jest.fn();
    const setPermissions = jest.fn();
    const userId = { current: null };
    const handleRole = jest.fn();

    checkPermissions({ value, setRole, setPermissions, userId, handleRole });

    expect(setPermissions).toHaveBeenCalledWith(["CREATE_INVESTMENT_PRODUCT", "VIEW_ALL_INVESTMENT_PRODUCT_RECORDS"]);
    expect(setRole).not.toHaveBeenCalled();
    expect(handleRole).toHaveBeenCalled();
  });

  // Given a user with no required investment permissions, when calling checkPermissions, then it should redirect to a specific URL
  it('should redirect to specific URL when user has no required investment permissions', () => {
    const value = {
      user: {
        user_permissions: ["VIEW_ALL_USERS", "CREATE_USER"]
      }
    };
    const setRole = jest.fn();
    const setPermissions = jest.fn();
    const userId = { current: null };
    const handleRole = jest.fn();
    window.location.href = "";

    checkPermissions({ value, setRole, setPermissions, userId, handleRole });

    expect(setPermissions).toHaveBeenCalledWith(["VIEW_ALL_USERS", "CREATE_USER"]);
    expect(setRole).not.toHaveBeenCalled();
    expect(window.location.href == "https://seabaas.dev.bepeerless.co" || window.location.href ==  "http://localhost/").toBe(true);
  });

  // Given a user with null permissions, when calling checkPermissions, then it should redirect to a specific URL
  it('should redirect to specific URL when user has null permissions', () => {
    const value = {
      user: {
        user_permissions: null
      }
    };
    const setRole = jest.fn();
    const setPermissions = jest.fn();
    const userId = { current: null };
    const handleRole = jest.fn();
    window.location.href = "";

    checkPermissions({ value, setRole, setPermissions, userId, handleRole });

    expect(setPermissions).toHaveBeenCalledWith([]);
    expect(setRole).not.toHaveBeenCalled();
    expect(window.location.href == "https://seabaas.dev.bepeerless.co" || window.location.href ==  "http://localhost/").toBe(true);
  });

  // // Given a user with undefined permissions, when calling checkPermissions, then it should redirect to a specific URL
  // it('should redirect to specific URL when user has undefined permissions', () => {
  //   const value = {
  //     user: {
  //       user_permissions: undefined
  //     }
  //   };
  //   const setRole = jest.fn();
  //   const setPermissions = jest.fn();
  //   const userId = { current: null };
  //   const handleRole = jest.fn();
  //   window.location.href = "";

  //   checkPermissions({ value, setRole, setPermissions, userId, handleRole });

  //   expect(setPermissions).toHaveBeenCalledWith(undefined);
  //   expect(setRole).not.toHaveBeenCalled();
  //   expect(window.location.href).toBe("https://seabaas.dev.bepeerless.co");
  // });

  // // Given a user with an empty permissions array, when calling checkPermissions, then it should redirect to a specific URL
  // it('should redirect to specific URL when user has an empty permissions array', () => {
  //   const value = {
  //     user: {
  //       user_permissions: []
  //     }
  //   };
  //   const setRole = jest.fn();
  //   const setPermissions = jest.fn();
  //   const userId = { current: null };
  //   const handleRole = jest.fn();
  //   window.location.href = "";

  //   checkPermissions({ value, setRole, setPermissions, userId, handleRole });

  //   expect(setPermissions).toHaveBeenCalledWith([]);
  //   expect(setRole).not.toHaveBeenCalled();
  //   expect(window.location.href).toBe("https://seabaas.dev.bepeerless.co");
  // });
});


