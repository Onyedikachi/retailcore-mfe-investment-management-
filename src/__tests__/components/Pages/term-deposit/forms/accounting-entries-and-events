// import React from "react";
// import {
//   fireEvent,
//   render,
//   screen,
//   waitFor,
//   act,
// } from "@testing-library/react";
// import AccountingEntriesAndEvents, {
//   InputDivs,
//   handleClear,
//   handleClick,

// } from "../../../../../components/pages/term-deposit/forms/accounting-entries-and-events";
// import { renderWithProviders } from "../../../../../utils/test-util";

// describe("AccountingEntriesAndEvents", () => {
//   const formD = {
//     productName: "",
//     slogan: "",
//     description: "",
//     startDate: new Date(),
//     endDate: null,
//     currency: "NGN",
//     customerCategory: null,
//   };
//   it("Renders without error", () => {
//     renderWithProviders(
//       <AccountingEntriesAndEvents
//         proceed={jest.fn}
//         formData={formD}
//         setFormData={jest.fn()}
//         setDisabled={jest.fn()}
//         initiateDraft={undefined}
//       />
//     );
//     expect(screen.getByText("Product to GL Mapping")).toBeInTheDocument();
//     expect(
//       screen.getByText("Term Deposit Liability account")
//     ).toBeInTheDocument();
//     expect(screen.getByText("Interest accural account")).toBeInTheDocument();

//     expect(screen.getAllByTestId("gli-input").length).toBeGreaterThan(0);
//   });

//   it("Should change gli inputs value", () => {
//     renderWithProviders(
//       <AccountingEntriesAndEvents
//         proceed={jest.fn}
//         formData={formD}
//         setFormData={jest.fn()}
//         setDisabled={jest.fn()}
//         initiateDraft={undefined}
//       />
//     );
//     const inputs = screen.getAllByTestId("gli-input");
//     inputs.forEach((input) => {
//       fireEvent.change(input, { target: { value: "Test value" } });
//       // @ts-ignore
//       expect(input.value).toBe("Test value");
//     });
//   });
// });


// describe("handleClear", () => {
//   // Sets clearFields state to true
//   it("should set clearFields state to true when handleClear is called", () => {
//     const setClearField = jest.fn();
//     const clearFields = false;
//     const setMapOptions = jest.fn();
//     const reset = jest.fn();

//     handleClear(setClearField, clearFields, setMapOptions, reset);

//     expect(setClearField).toHaveBeenCalledWith(true);
//   });

//   // Sets mapOptions state to an empty array
//   it("should set mapOptions state to an empty array when handleClear is called", () => {
//     const setClearField = jest.fn();
//     const clearFields = false;
//     const setMapOptions = jest.fn();
//     const reset = jest.fn();

//     handleClear(setClearField, clearFields, setMapOptions, reset);

//     expect(setMapOptions).toHaveBeenCalledWith([]);
//   });

//   // Calls reset function from react-hook-form library
//   it("should call reset function when handleClear is called", () => {
//     const setClearField = jest.fn();
//     const clearFields = false;
//     const setMapOptions = jest.fn();
//     const reset = jest.fn();

//     handleClear(setClearField, clearFields, setMapOptions, reset);

//     expect(reset).toHaveBeenCalled();
//   });

//   // None of the states or functions are passed as arguments

//   // clearFields state is already true
//   it("should set clearFields state to false when handleClear is called and clearFields state is already true", () => {
//     const setClearField = jest.fn();
//     const clearFields = true;
//     const setMapOptions = jest.fn();
//     const reset = jest.fn();

//     handleClear(setClearField, clearFields, setMapOptions, reset);

//     expect(setClearField).toHaveBeenCalledWith(false);
//   });

//   // mapOptions state is already an empty array
//   it("should not call setMapOptions function when handleClear is called and mapOptions state is already an empty array", () => {
//     const setClearField = jest.fn();
//     const clearFields = false;
//     const setMapOptions = jest.fn();
//     const reset = jest.fn();
//     const mapOptions = [];

//     handleClear(setClearField, clearFields, setMapOptions, reset);

//     expect(setMapOptions).toHaveBeenCalled();
//   });
// });


// describe("handleClick", () => {
//   // Clicking on a valid submenu updates the corresponding GlInput value with the submenu name
//   it("should update GlInput value when clicking on a valid submenu", () => {
//     // Arrange
//     const key = "TermDepositLiabilityAccount";
//     const submenu = {
//       name: "Account Name",
//       id: 12345,
//     };
//     const setValue = jest.fn();
//     const mapOptions = [];
//     const setMapOptions = jest.fn();
//     const GlMappingOptions = [
//       {
//         id: 0,
//         text: "Term Deposit Liability account",
//         key: "TermDepositLiabilityAccount",
//       },
//       {
//         id: 1,
//         text: "Interest accural account",
//         key: "InterestAccrualAccount",
//       },
//       {
//         id: 2,
//         text: "Interest expense account",
//         key: "InterestExpenseAccount",
//       },
//     ];

//     // Act
//     handleClick(
//       key,
//       submenu,
//       setValue,
//       mapOptions,
//       setMapOptions,
//       GlMappingOptions
//     );

//     // Assert
//     expect(setValue).toHaveBeenCalledWith(key, submenu.name);
//   });

//   // Clicking on a valid submenu adds a new object to the mapOptions array with the correct accountName, accountId and glAccountType
//   it("should add a new object to mapOptions array when clicking on a valid submenu", () => {
//     // Arrange
//     const key = "TermDepositLiabilityAccount";
//     const submenu = {
//       name: "Account Name",
//       id: 12345,
//     };
//     const setValue = jest.fn();
//     const mapOptions = [];
//     const setMapOptions = jest.fn();
//     const GlMappingOptions = [
//       {
//         id: 0,
//         text: "Term Deposit Liability account",
//         key: "TermDepositLiabilityAccount",
//       },
//       {
//         id: 1,
//         text: "Interest accural account",
//         key: "InterestAccrualAccount",
//       },
//       {
//         id: 2,
//         text: "Interest expense account",
//         key: "InterestExpenseAccount",
//       },
//     ];

//     // Act
//     handleClick(
//       key,
//       submenu,
//       setValue,
//       mapOptions,
//       setMapOptions,
//       GlMappingOptions
//     );

//     // Assert
//     expect(setMapOptions).toHaveBeenCalledWith([
//       { accountName: submenu.name, accountId: submenu.id, glAccountType: 0 },
//     ]);
//   });

//   // Clicking on a submenu that is already mapped updates the corresponding object in the mapOptions array with the correct accountName and accountId
//   it("should update corresponding object in mapOptions array when clicking on a submenu that is already mapped", () => {
//     // Arrange
//     const key = "TermDepositLiabilityAccount";
//     const submenu = {
//       name: "Account Name",
//       id: 12345,
//     };
//     const setValue = jest.fn();
//     const mapOptions = [
//       { accountName: "Old Account", accountId: 54321, glAccountType: 0 },
//     ];
//     const setMapOptions = jest.fn();
//     const GlMappingOptions = [
//       {
//         id: 0,
//         text: "Term Deposit Liability account",
//         key: "TermDepositLiabilityAccount",
//       },
//       {
//         id: 1,
//         text: "Interest accural account",
//         key: "InterestAccrualAccount",
//       },
//       {
//         id: 2,
//         text: "Interest expense account",
//         key: "InterestExpenseAccount",
//       },
//     ];

//     // Act
//     handleClick(
//       key,
//       submenu,
//       setValue,
//       mapOptions,
//       setMapOptions,
//       GlMappingOptions
//     );

//     // Assert
//     expect(setMapOptions).toHaveBeenCalled();
//   });

//   // Clicking on an invalid submenu does not update the GlInput value
//   it("should not update GlInput value when clicking on an invalid submenu", () => {
//     // Arrange
//     const key = "InvalidAccount";
//     const submenu = {
//       name: "Invalid Account",
//       id: 12345,
//     };
//     const setValue = jest.fn();
//     const mapOptions = [];
//     const setMapOptions = jest.fn();
//     const GlMappingOptions = [
//       {
//         id: 0,
//         text: "Term Deposit Liability account",
//         key: "TermDepositLiabilityAccount",
//       },
//       {
//         id: 1,
//         text: "Interest accural account",
//         key: "InterestAccrualAccount",
//       },
//       {
//         id: 2,
//         text: "Interest expense account",
//         key: "InterestExpenseAccount",
//       },
//     ];

//     // Act
//     handleClick(
//       key,
//       submenu,
//       setValue,
//       mapOptions,
//       setMapOptions,
//       GlMappingOptions
//     );

//     // Assert
//     expect(setValue).toHaveBeenCalled();
//   });

//   // Clicking on an invalid submenu does not add a new object to the mapOptions array
//   it("should not add a new object to mapOptions array when clicking on an invalid submenu", () => {
//     // Arrange
//     const key = "InvalidAccount";
//     const submenu = {
//       name: "Invalid Account",
//       id: 12345,
//     };
//     const setValue = jest.fn();
//     const mapOptions = [];
//     const setMapOptions = jest.fn();
//     const GlMappingOptions = [
//       {
//         id: 0,
//         text: "Term Deposit Liability account",
//         key: "TermDepositLiabilityAccount",
//       },
//       {
//         id: 1,
//         text: "Interest accural account",
//         key: "InterestAccrualAccount",
//       },
//       {
//         id: 2,
//         text: "Interest expense account",
//         key: "InterestExpenseAccount",
//       },
//     ];

//     // Act
//     handleClick(
//       key,
//       submenu,
//       setValue,
//       mapOptions,
//       setMapOptions,
//       GlMappingOptions
//     );

//     // Assert
//     expect(setMapOptions).toHaveBeenCalled();
//   });
// });
