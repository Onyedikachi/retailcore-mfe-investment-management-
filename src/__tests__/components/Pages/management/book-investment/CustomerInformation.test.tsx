import { handleAccountNumberAndData, handleKYCStatus, updateCustomerData } from "../../../../../components/pages/management/book-investment/CustomerInformation"
import {capitalizeFirstLetter} from "../../../../../utils/capitalizeFirstLetter"

describe('updateCustomerData', () => {

  // Sets customers data based on response data
  it('should set customers data based on response data', () => {
    const isSuccess = true;
    const formData = {};
    const customerData = {};
    const setFormData = jest.fn();
    const setCustomersData = jest.fn();
    const data = {
      data: [
        {
          customerId: 1,
          customer_products: [
            {
              accountNumber: "1234567890"
            }
          ],
          customer_profiles: [
            {
              firstName: "John",
              otherNames: "Doe",
              surname: "Smith"
            }
          ]
        }
      ]
    };

    updateCustomerData({ isSuccess, formData, customerData, setFormData, setCustomersData, data });

    expect(setCustomersData).toHaveBeenCalledWith([
      {
        id: 1,
        name: "1234567890",
        code: "John Doe Smith",
        value: {
          customerId: 1,
          customer_products: [
            {
              accountNumber: "1234567890"
            }
          ],
          customer_profiles: [
            {
              firstName: "John",
              otherNames: "Doe",
              surname: "Smith"
            }
          ]
        }
      }
    ]);
    expect(setFormData).toHaveBeenCalledWith({
      ...formData,
      customerId: undefined
    });
  });

  // Sets form data customerId based on customerData
  it('should set form data customerId based on customerData', () => {
    const isSuccess = true;
    const formData = {};
    const customerData = { customerId: 1 };
    const setFormData = jest.fn();
    const setCustomersData = jest.fn();
    const data = {
      data: [
        {
          customerId: 1,
          customer_products: [
            {
              accountNumber: "1234567890"
            }
          ],
          customer_profiles: [
            {
              firstName: "John",
              otherNames: "Doe",
              surname: "Smith"
            }
          ]
        }
      ]
    };

    updateCustomerData({ isSuccess, formData, customerData, setFormData, setCustomersData, data });

    expect(setFormData).toHaveBeenCalledWith({
      ...formData,
      customerId: 1
    });
  });

  // isSuccess is false, does not update customers data or form data
  it('should not update customers data or form data when isSuccess is false', () => {
    const isSuccess = false;
    const formData = {};
    const customerData = {};
    const setFormData = jest.fn();
    const setCustomersData = jest.fn();
    const data = {
      data: [
        {
          customerId: 1,
          customer_products: [
            {
              accountNumber: "1234567890"
            }
          ],
          customer_profiles: [
            {
              firstName: "John",
              otherNames: "Doe",
              surname: "Smith"
            }
          ]
        }
      ]
    };

    updateCustomerData({ isSuccess, formData, customerData, setFormData, setCustomersData, data });

    expect(setCustomersData).not.toHaveBeenCalled();
    expect(setFormData).not.toHaveBeenCalled();
  });
});

// Generated by CodiumAI

describe('handleAccountNumberAndData', () => {

  // When accountNumber and data are both truthy, set the customerData state to the object in data that has a customer_products array containing an object with an accountNumber matching the accountNumber argument.
  it('should set customerData state when accountNumber and data are both truthy', () => {
    // Arrange
    const accountNumber = '1234567890';
    const data = {
      data: [
        {
          customerId: '123',
          customer_profiles: [
            {
              firstName: 'John',
              otherNames: 'Doe',
              surname: 'Smith',
            },
          ],
          customer_products: [
            {
              accountNumber: "1234567890"
            }
          ],
        },
      ],
    };
    const setCustomerData = jest.fn();
    const setValue = jest.fn();
    const trigger = jest.fn();
    const formData = {};
    const setFormData = jest.fn();

    // Act
    handleAccountNumberAndData({
      accountNumber,
      data,
      setCustomerData,
      setValue,
      trigger,
      formData,
      setFormData,
    });

    // Assert
    expect(setCustomerData).toHaveBeenCalledWith(data.data[0]);
  });

  // Update the formData state with the customerId and customerProfile properties of the foundObject.
  it('should update formData state with customerId and customerProfile properties', () => {
    // Arrange
    const accountNumber = '123456789';
    const data = {
      data: [
        {
          customerId: '123',
          customer_profiles: [
            {
              firstName: 'John',
              otherNames: 'Doe',
              surname: 'Smith',
            },
          ],
        },
      ],
    };
    const setCustomerData = jest.fn();
    const setValue = jest.fn();
    const trigger = jest.fn();
    const formData = {};
    const setFormData = jest.fn();

    // Act
    handleAccountNumberAndData({
      accountNumber,
      data,
      setCustomerData,
      setValue,
      trigger,
      formData,
      setFormData,
    });

    // Assert
    expect(setFormData).toHaveBeenCalledWith({ "customerId": undefined, "customerProfile": undefined });
  });
  // Set the customerId, customerName, and customerAccount fields of the form with the corresponding values from the foundObject.
  it('should set customerId, customerName, and customerAccount fields of the form', () => {
    // Arrange
    const accountNumber = '1234567890';
    const data = {
      data: [
        {
          customerId: '123',
          customer_profiles: [
            {
              firstName: 'John',
              otherNames: 'Doe',
              surname: 'Smith',
            },
          ],
          customer_products: [
            {
              accountNumber: "1234567890"
            }
          ],
        },
      ],
    };
    const setCustomerData = jest.fn();
    const setValue = jest.fn();
    const trigger = jest.fn();
    const formData = {};
    const setFormData = jest.fn();

    // Act
    handleAccountNumberAndData({
      accountNumber,
      data,
      setCustomerData,
      setValue,
      trigger,
      formData,
      setFormData,
    });

    // Assert
    expect(setValue).toHaveBeenCalledWith(
      'customerName',
      `${capitalizeFirstLetter(data.data[0].customer_profiles[0].firstName)} ${capitalizeFirstLetter(data.data[0].customer_profiles[0].otherNames)} ${capitalizeFirstLetter(data.data[0].customer_profiles[0].surname)}`
      );
      expect(setValue).toHaveBeenCalledWith('customerAccount', accountNumber);
      expect(setValue).toBeCalledTimes(3)
  });

  // When accountNumber is falsy, do not modify any state or form fields.
  it('should not modify any state or form fields when accountNumber is falsy', () => {
    // Arrange
    const accountNumber = '';
    const data = {
      data: [
        {
          customerId: '123',
          customer_profiles: [
            {
              firstName: 'John',
              otherNames: 'Doe',
              surname: 'Smith',
            },
          ],
        },
      ],
    };
    const setCustomerData = jest.fn();
    const setValue = jest.fn();
    const trigger = jest.fn();
    const formData = {};
    const setFormData = jest.fn();

    // Act
    handleAccountNumberAndData({
      accountNumber,
      data,
      setCustomerData,
      setValue,
      trigger,
      formData,
      setFormData,
    });

    // Assert
    expect(setCustomerData).not.toHaveBeenCalled();
    expect(setValue).not.toHaveBeenCalled();
    expect(trigger).not.toHaveBeenCalled();
    expect(setFormData).not.toHaveBeenCalled();
  });

  // When data is falsy, set the customerData state to null and do not modify any form fields or other state.
  it('should set customerData state to null when data is falsy', () => {
    // Arrange
    const accountNumber = '123456789';
    const data = null;
    const setCustomerData = jest.fn();
    const setValue = jest.fn();
    const trigger = jest.fn();
    const formData = {};
    const setFormData = jest.fn();

    // Act
    handleAccountNumberAndData({
      accountNumber,
      data,
      setCustomerData,
      setValue,
      trigger,
      formData,
      setFormData,
    });

    // Assert
    expect(setCustomerData).not.toHaveBeenCalled();
    expect(setValue).not.toHaveBeenCalled();
    expect(trigger).not.toHaveBeenCalled();
    expect(setFormData).not.toHaveBeenCalled();
  });

  // When no object is found in data with a customer_products array containing an object with an accountNumber matching the accountNumber argument, set the customerData state to null and do not modify any form fields or other state.
  it('should set customerData state to null when no object is found in data', () => {
    // Arrange
    const accountNumber = '123456789';
    const data = {
      data: [
        {
          customer_products: [
            {
              accountNumber: '987654321',
            },
          ],
        },
      ],
    };
    const setCustomerData = jest.fn();
    const setValue = jest.fn();
    const trigger = jest.fn();
    const formData = {};
    const setFormData = jest.fn();

    // Act
    handleAccountNumberAndData({
      accountNumber,
      data,
      setCustomerData,
      setValue,
      trigger,
      formData,
      setFormData,
    });

    // Assert
    expect(setCustomerData).toHaveBeenCalledWith(undefined);
    expect(setValue).toHaveBeenCalled();
    expect(trigger).toHaveBeenCalled();
    expect(setFormData).toHaveBeenCalled();
  });
});