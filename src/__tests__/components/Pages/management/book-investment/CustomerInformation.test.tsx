import { renderWithProviders } from "../../../../../__mocks__/api/Wrapper";
import {screen} from "@testing-library/react";
import CustomerInformation, { onProceed } from "../../../../../components/pages/management/book-investment/CustomerInformation"

jest.mock("react-router-dom", () => ({
  BrowserRouter: ({ children }) => <div>{children}</div>,
  Link: ({ to, children }) => <a href={to}>{children}</a>,
  useNavigate: jest.fn(),
  useSearchParams: jest.fn(),
  useParams: jest.fn().mockResolvedValue({investmentType: "individual"}),
  useLocation: jest.fn().mockReturnValue({ pathname: "" })
}));

// // isSuccess is false, does not update customers data or form data
// it('should not update customers data or form data when isSuccess is false', () => {
//   const isSuccess = false;
//   const formData = {};
//   const customerData = {};
//   const setFormData = jest.fn();
//   const setCustomersData = jest.fn();
//   const data = {
//     data: [
//       {
//         customerId: 1,
//         customer_products: [
//           {
//             accountNumber: "1234567890"
//           }
//         ],
//         customer_profiles: [
//           {
//             firstName: "John",
//             otherNames: "Doe",
//             surname: "Smith"
//           }
//         ]
//       }
//     ]
//   };

//   updateCustomerData({ isSuccess, formData, customerData, setFormData, setCustomersData, data });

//   expect(setCustomersData).not.toHaveBeenCalled();
//   expect(setFormData).not.toHaveBeenCalled();
// });

// // Generated by CodiumAI

// describe('handleAccountNumberAndData', () => {

//   // When accountNumber and data are both truthy, set the customerData state to the object in data that has a customer_products array containing an object with an accountNumber matching the accountNumber argument.
//   it('should set customerData state when accountNumber and data are both truthy', () => {
//     // Arrange
//     const accountNumber = '1234567890';
//     const data = {
//       data: [
//         {
//           customerId: '123',
//           customer_profiles: [
//             {
//               firstName: 'John',
//               otherNames: 'Doe',
//               surname: 'Smith',
//             },
//           ],
//           customer_products: [
//             {
//               accountNumber: "1234567890"
//             }
//           ],
//         },
//       ],
//     };
//     const setCustomerData = jest.fn();
//     const setValue = jest.fn();
//     const trigger = jest.fn();
//     const formData = {};
//     const setFormData = jest.fn();

//     // Act
//     handleAccountNumberAndData({
//       accountNumber,
//       data,
//       setCustomerData,
//       setValue,
//       trigger,
//       formData,
//       setFormData,
//     });

//     // Assert
//     expect(setCustomerData).toHaveBeenCalledWith(data.data[0]);
//   });

//   // Update the formData state with the customerId and customerProfile properties of the foundObject.
//   it('should update formData state with customerId and customerProfile properties', () => {
//     // Arrange
//     const accountNumber = '123456789';
//     const data = {
//       data: [
//         {
//           customerId: '123',
//           customer_profiles: [
//             {
//               firstName: 'John',
//               otherNames: 'Doe',
//               surname: 'Smith',
//             },
//           ],
//         },
//       ],
//     };
//     const setCustomerData = jest.fn();
//     const setValue = jest.fn();
//     const trigger = jest.fn();
//     const formData = {};
//     const setFormData = jest.fn();

//     // Act
//     handleAccountNumberAndData({
//       accountNumber,
//       data,
//       setCustomerData,
//       setValue,
//       trigger,
//       formData,
//       setFormData,
//     });

//     // Assert
//     expect(setFormData).toHaveBeenCalledWith({ "customerId": undefined, "customerProfile": undefined });
//   });
//   // Set the customerId, customerName, and customerAccount fields of the form with the corresponding values from the foundObject.
//   it('should set customerId, customerName, and customerAccount fields of the form', () => {
//     // Arrange
//     const accountNumber = '1234567890';
//     const data = {
//       data: [
//         {
//           customerId: '123',
//           customer_profiles: [
//             {
//               firstName: 'John',
//               otherNames: 'Doe',
//               surname: 'Smith',
//             },
//           ],
//           customer_products: [
//             {
//               accountNumber: "1234567890"
//             }
//           ],
//         },
//       ],
//     };
//     const setCustomerData = jest.fn();
//     const setValue = jest.fn();
//     const trigger = jest.fn();
//     const formData = {};
//     const setFormData = jest.fn();

//     // Act
//     handleAccountNumberAndData({
//       accountNumber,
//       data,
//       setCustomerData,
//       setValue,
//       trigger,
//       formData,
//       setFormData,
//     });

//     // Assert
//     expect(setValue).toHaveBeenCalledWith(
//       'customerName',
//       `${capitalizeFirstLetter(data.data[0].customer_profiles[0].firstName)} ${capitalizeFirstLetter(data.data[0].customer_profiles[0].otherNames)} ${capitalizeFirstLetter(data.data[0].customer_profiles[0].surname)}`
//     );
//     expect(setValue).toHaveBeenCalledWith('customerAccount', accountNumber);
//     expect(setValue).toBeCalledTimes(3)
//   });

//   // When accountNumber is falsy, do not modify any state or form fields.
//   it('should not modify any state or form fields when accountNumber is falsy', () => {
//     // Arrange
//     const accountNumber = '';
//     const data = {
//       data: [
//         {
//           customerId: '123',
//           customer_profiles: [
//             {
//               firstName: 'John',
//               otherNames: 'Doe',
//               surname: 'Smith',
//             },
//           ],
//         },
//       ],
//     };
//     const setCustomerData = jest.fn();
//     const setValue = jest.fn();
//     const trigger = jest.fn();
//     const formData = {};
//     const setFormData = jest.fn();

//     // Act
//     handleAccountNumberAndData({
//       accountNumber,
//       data,
//       setCustomerData,
//       setValue,
//       trigger,
//       formData,
//       setFormData,
//     });

//     // Assert
//     expect(setCustomerData).not.toHaveBeenCalled();
//     expect(setValue).not.toHaveBeenCalled();
//     expect(trigger).not.toHaveBeenCalled();
//     expect(setFormData).not.toHaveBeenCalled();
//   });

//   // When data is falsy, set the customerData state to null and do not modify any form fields or other state.
//   it('should set customerData state to null when data is falsy', () => {
//     // Arrange
//     const accountNumber = '123456789';
//     const data = null;
//     const setCustomerData = jest.fn();
//     const setValue = jest.fn();
//     const trigger = jest.fn();
//     const formData = {};
//     const setFormData = jest.fn();

//     // Act
//     handleAccountNumberAndData({
//       accountNumber,
//       data,
//       setCustomerData,
//       setValue,
//       trigger,
//       formData,
//       setFormData,
//     });

//     // Assert
//     expect(setCustomerData).not.toHaveBeenCalled();
//     expect(setValue).not.toHaveBeenCalled();
//     expect(trigger).not.toHaveBeenCalled();
//     expect(setFormData).not.toHaveBeenCalled();
//   });

//   // When no object is found in data with a customer_products array containing an object with an accountNumber matching the accountNumber argument, set the customerData state to null and do not modify any form fields or other state.
//   it('should set customerData state to null when no object is found in data', () => {
//     // Arrange
//     const accountNumber = '123456789';
//     const data = {
//       data: [
//         {
//           customer_products: [
//             {
//               accountNumber: '987654321',
//             },
//           ],
//         },
//       ],
//     };
//     const setCustomerData = jest.fn();
//     const setValue = jest.fn();
//     const trigger = jest.fn();
//     const formData = {};
//     const setFormData = jest.fn();

//     // Act
//     handleAccountNumberAndData({
//       accountNumber,
//       data,
//       setCustomerData,
//       setValue,
//       trigger,
//       formData,
//       setFormData,
//     });

//     // Assert
//     expect(setCustomerData).toHaveBeenCalledWith(undefined);
//     expect(setValue).toHaveBeenCalled();
//     expect(trigger).toHaveBeenCalled();
//     expect(setFormData).toHaveBeenCalled();
//   });
// });

// // Generated by CodiumAI

// describe('handleKYCStatus', () => {

//   // Sets valid KYC status to true if profileIsSuccess is true and status of customer identity verification is passed
//   it('should set valid KYC status to true when profileIsSuccess is true and status of customer identity verification is passed', () => {
//     const setValidKyc = jest.fn();
//     const setKycFailed = jest.fn();
//     const profileIsSuccess = true;
//     const profileData = {
//       data: {
//         risk_assessments: [
//           {
//             parameter: "Status of Customer Identity Verification",
//             parameterOption: "Passed"
//           }
//         ]
//       }
//     };
//     const accountNumber = "1234567890";

//     handleKYCStatus({ profileIsSuccess, profileData, setValidKyc, accountNumber, setKycFailed });

//     expect(setValidKyc).toHaveBeenCalledWith(true);
//     expect(setKycFailed).toHaveBeenCalledWith(false);
//   });

//   // Sets valid KYC status to false if profileIsSuccess is true and status of customer identity verification is failed
//   it('should set valid KYC status to false when profileIsSuccess is true and status of customer identity verification is failed', () => {
//     const setValidKyc = jest.fn();
//     const setKycFailed = jest.fn();
//     const profileIsSuccess = true;
//     const profileData = {
//       data: {
//         risk_assessments: [
//           {
//             parameter: "Status of Customer Identity Verification",
//             parameterOption: "Failed"
//           }
//         ]
//       }
//     };
//     const accountNumber = "1234567890";

//     handleKYCStatus({ profileIsSuccess, profileData, setValidKyc, accountNumber, setKycFailed });

//     expect(setValidKyc).toHaveBeenCalledWith(false);
//     expect(setKycFailed).toHaveBeenCalledWith(true);
//   });
// });

jest.mock("../../../../../api", () => ({
  useGetCustomerSearchQuery: jest.fn().mockReturnValue({
    isSuccess: true,
    data: {
      data: [
        {
          "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
          "customerType": "Individual",
          "status": "Active",
          "monitoring": false,
          "isTerminated": false,
          "approvalStatus": "Approved",
          "tenantId": "79fa72ce-2ff1-48fb-8558-f9b0c9b02fae",
          "initiator": "Harry Kane",
          "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
          "approver": "Michael Jackson",
          "approverId": "b86b0505-aedf-4a7d-b948-665b507b53de",
          "branch": "S001",
          "branchId": null,
          "requiresRegularization": false,
          "createdAt": "2024-04-02T10:13:05.487Z",
          "updatedAt": "2024-04-02T15:46:07.040Z",
          "customer_profiles": [
            {
              "customerProfileId": "b4e15a2b-8c6b-4fe6-9fae-2e2f90c8cb2c",
              "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
              "title": null,
              "firstName": "Ayomide",
              "surname": "Adetola",
              "otherNames": null,
              "customerNumber": "32293516648",
              "mobileNumber": "",
              "alternateMobileNumber": "",
              "emailAddress": null,
              "dateOfBirth": null,
              "companyNameBusiness": null,
              "bvn": "22113344556",
              "nin": null,
              "certificateOfIncorporation": null,
              "taxIdentificationNumber": null,
              "nationality": null,
              "categoryOfBusiness": null,
              "dateOfRegistration": null,
              "introducer": null,
              "createdAt": "2024-04-02T10:13:05.496Z",
              "updatedAt": "2024-04-02T10:13:05.496Z",
              "lga": "",
              "ci_lga": "",
              "ed_lga": "",
              "gender": "Male",
              "country": "Select Country",
              "validId": "[]",
              "fullName": "Ayomide Adetola",
              "customerPhoto": "[{\"signedUrl\":\"https://revent-sterling-services.s3.amazonaws.com/CustomerDocument-MicrosoftTeams-image%20%28John%20Doe%20Individual%29.pdf9b7el8?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAUEFPZCRBUP25HJJY%2F20240402%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240402T101057Z&X-Amz-Expires=604800&X-Amz-Signature=e2dfa2db94336a51ff9245242ac29fc246a75921a53f4bdba32b65c582885a8c&X-Amz-SignedHeaders=host\"}]",
              "maritalStatus": "Single",
              "stateOfOrigin": "",
              "mailingAddress": "ayomideadetola@gmail.com",
              "dualCitizenship": "No",
              "ci_stateOfOrigin": "",
              "customerEntityId": "77287539693",
              "customerSignature": "[{\"signedUrl\":\"https://revent-sterling-services.s3.amazonaws.com/CustomerDocument-International%20passport.jpg0ps2a3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAUEFPZCRBUP25HJJY%2F20240402%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240402T101039Z&X-Amz-Expires=604800&X-Amz-Signature=52f71e6a24ec69605bd7207779a1d60e1a4d497ee12969388c8aa3bbeb1a46cc&X-Amz-SignedHeaders=host\"}]",
              "residentialPermit": "[]",
              "residentialAddress": "10, Mobolaji crescent",
              "marriageCertificate": "[]",
              "employersMobileNumber": "",
              "proofOfResidenceAddress": "[]",
              "employersAlternativeNumber": "",
              "otherUncategorisedDocuments": "[]",
              "detailedDescriptionOfAddress": "",
              "letterFromEmployerSchoolNusc": "[]",
              "independentSatisfactoryReference": "[]",
              "detailedDecsriptionOfEmployersAddress": "",
              "detailedDescriptionOfResidentialAddress": ""
            }
          ],
          "requests": [
            {
              "requestId": "be7f7529-4d1e-4154-995d-f68bf47bb77c",
              "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
              "requestTitle": "Concession modification of Account Number 4792880728",
              "requestType": "ContractModification",
              "requestSubType": "account-concession",
              "accountNumber": "4792880728",
              "justification": "",
              "initiator": "Harry Kane",
              "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
              "status": "Approved",
              "approvalStatus": "Approved",
              "approver": "Michael Jackson",
              "approverId": "b86b0505-aedf-4a7d-b948-665b507b53de",
              "data": {
                "isProduct": true,
                "accountNumber": "4792880728",
                "accountConcessionData": [
                  {
                    "hasConcession": false,
                    "concessionId": null,
                    "accountNumber": "4792880728",
                    "productId": "59895a71-f447-41a7-8423-402c4044856b",
                    "productOperatingConditionId": "04949b3d-5635-4c1f-bb9c-823aa2957668",
                    "data": {
                      "accountNo": "4792880728",
                      "createdById": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
                      "createBy": "harrykane@yopmail.com",
                      "tenantId": "79fa72ce-2ff1-48fb-8558-f9b0c9b02fae",
                      "minOpeningBal": 1000,
                      "minOpertBal": 0,
                      "minOpertBalBreachPen": "DoNothing",
                      "minOpertBalResMech": "Manual",
                      "minOpertBalChrgId": null,
                      "minOpertBalChrgName": null,
                      "maxCumBal": null,
                      "maxCumBalBreachPen": null,
                      "maxCumBalResMech": null,
                      "maxCumBalChrgId": null,
                      "maxCumBalChrgName": null,
                      "maxCumBalPortion": null,
                      "lockInPeriod": null,
                      "lockInPeriodValue": null,
                      "lockInPeriodBreachPen": null,
                      "lockInPeriodResMech": null,
                      "lockInPeriodChrgId": null,
                      "lockInPeriodChrgName": null,
                      "lockInPeriodPortion": null,
                      "inactivityPeriod": null,
                      "inactivityPeriodValue": null,
                      "inactivityPeriodBreachPen": null,
                      "inactivityPeriodResMech": null,
                      "inactivityPeriodChrgId": null,
                      "inactivityPeriodChrgName": null,
                      "inactivityPeriodPortion": null,
                      "maxCumWithdValue": null,
                      "maxCumBreachPen": null,
                      "maxCumWithdPeriod": null,
                      "maxCumResMech": null,
                      "maxCumWithdChrgId": null,
                      "maxCumWithdChrgName": null,
                      "maxCumWithdPortion": null,
                      "maxCumWithdCountPortion": null,
                      "maxCumWithdCount": null,
                      "maxCumWithdCountBreachPen": null,
                      "maxCumWithdCountPeriod": null,
                      "maxCumWithdCountResMech": null,
                      "maxCumCountChrgId": null,
                      "maxCumCountChrgName": null,
                      "maxSingleDepst": null,
                      "maxSingleDepstBreachPen": null,
                      "maxSingleDepstResMech": null,
                      "maxSingleDepstChrgId": null,
                      "maxSingleDepstChrgName": null,
                      "maxSingleDepstBalPortion": null,
                      "maxSingleWithd": null,
                      "maxSingleWithdBreachPen": null,
                      "maxSingleWithdResMech": null,
                      "maxSingleWithdChrgId": null,
                      "maxSingleWithdChrgName": null,
                      "maxSingleWithdPortion": null,
                      "productOperatingConditionId": "04949b3d-5635-4c1f-bb9c-823aa2957668",
                      "productId": "59895a71-f447-41a7-8423-402c4044856b",
                      "pricingConfigurationId": "fefe56d5-b9b5-4686-8797-3d9ea720fdbc",
                      "interestAccrualMechanism": "Simple",
                      "interestComputationDaysMethod": "Actual/365",
                      "interestCapitalizationInterval": "Monthly",
                      "interestRates": [
                        {
                          "interestRatePercentage": 8,
                          "minimumAccountBalance": -1,
                          "maximumAccountBalance": -1
                        }
                      ],
                      "enabledOverdraft": false,
                      "overdraftProductId": null,
                      "overdraftProductName": null,
                      "productAccountingEntryId": "2179e334-528d-4270-be53-24dee4f827c8",
                      "depositLiabilityLedgerId": "6bbed7f2-5982-4648-9779-25e1cbbecae5",
                      "depositLiabilityLedgerName": "Term deposit",
                      "depositLiabilityLedgerCode": "LIALIADLLDLL10001000I002I002",
                      "depositLiabilityLedgerClass": null,
                      "depositLiabilityParentLedgerId": "ff9f0d26-5d2a-4f13-9363-e2dde987ba5f",
                      "depositLiabilityParentLedgerCode": "LIADLL",
                      "interestAccuralLedgerId": "a2156086-8bf2-4255-b268-15f748cf9c8f",
                      "interestAccuralLedgerName": "Interest accrual",
                      "interestAccuralLedgerCode": "LIALIADLLDLL10011001I002I002",
                      "interestAccuralLedgerClass": null,
                      "interestAccuralParentLedgerId": "ff9f0d26-5d2a-4f13-9363-e2dde987ba5f",
                      "interestAccuralParentLedgerCode": "LIADLL",
                      "interestExpenseLedgerId": "cd7b57b6-5492-4604-b700-85af28b35834",
                      "interestExpenseLedgerName": "Interest expense",
                      "interestExpenseLedgerCode": "EXPPEX0004I002",
                      "interestExpenseLedgerClass": null,
                      "interestExpenseParentLedgerId": "bdf0914d-449a-4b3c-a25b-1d357ac87946",
                      "interestExpenseParentLedgerCode": "EXPPEX",
                      "fundsDepositCharges": [
                        {
                          "id": "7da655fd-4074-449c-ba8c-c39fd75b6ffe"
                        }
                      ],
                      "fundsDepositTaxes": [],
                      "branchTransactionCharges": [],
                      "branchTransactionTaxes": [],
                      "interestAccuralCharges": [],
                      "interestAccuralTaxes": [],
                      "interestDisbursementCharges": [],
                      "interestDisbursementTaxes": [],
                      "recentlyUpdatedColumn": ""
                    }
                  }
                ],
                "productData": [
                  {
                    "customerProductId": "d2a445cf-b9eb-46c2-a7cc-d169ac36f9a6",
                    "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
                    "productId": "59895a71-f447-41a7-8423-402c4044856b",
                    "productName": "Techno Product",
                    "productCode": "SAV088",
                    "accountNumber": "4792880728",
                    "currency": "NGN",
                    "productCategory": "CASA",
                    "productType": "Savings",
                    "status": "Active",
                    "description": "For techno",
                    "slogan": "DCC",
                    "hasVariant": false,
                    "parentProductId": null,
                    "primaryRelationshipOfficer": null,
                    "secondaryRelationshipOfficer": null,
                    "transactionNote": null,
                    "createdAt": "2024-04-02T15:46:07.047Z",
                    "updatedAt": "2024-04-02T15:46:07.047Z"
                  }
                ]
              },
              "customerType": "Individual",
              "creationMode": "Legacy",
              "branch": "S001",
              "branchId": null,
              "withdrawn": false,
              "isDeleted": false,
              "deletedOn": null,
              "rejectionDocument": null,
              "rejectionReason": null,
              "createdAt": "2024-04-02T15:48:21.544Z",
              "updatedAt": "2024-04-02T15:50:48.423Z"
            },
            {
              "requestId": "1eb4569b-1073-43d5-a849-ae4fa6ccb8d0",
              "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
              "requestTitle": "Restriction Placement on Account Number 4792880728",
              "requestType": "Modification",
              "requestSubType": "account-freeze",
              "accountNumber": "4792880728",
              "justification": "test",
              "initiator": "Harry Kane",
              "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
              "status": "Approved",
              "approvalStatus": "Approved",
              "approver": "Michael Jackson",
              "approverId": "b86b0505-aedf-4a7d-b948-665b507b53de",
              "data": {
                "isProduct": true,
                "accountNumber": "4792880728",
                "accountFreezeData": [
                  {
                    "accountNumber": "4792880728",
                    "freezeCode": "002"
                  }
                ]
              },
              "customerType": "Individual",
              "creationMode": "Legacy",
              "branch": "S001",
              "branchId": null,
              "withdrawn": false,
              "isDeleted": false,
              "deletedOn": null,
              "rejectionDocument": null,
              "rejectionReason": null,
              "createdAt": "2024-04-02T15:54:50.853Z",
              "updatedAt": "2024-04-02T15:56:28.153Z"
            },
            {
              "requestId": "076a4ba8-8e4e-446b-b9ca-137c1be7ed96",
              "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
              "requestTitle": "Restriction Placement on Account Number 4792880728",
              "requestType": "Modification",
              "requestSubType": "account-lien",
              "accountNumber": "4792880728",
              "justification": "Test",
              "initiator": "Harry Kane",
              "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
              "status": "Approved",
              "approvalStatus": "Approved",
              "approver": "Michael Jackson",
              "approverId": "b86b0505-aedf-4a7d-b948-665b507b53de",
              "data": {
                "isProduct": true,
                "accountNumber": "4792880728",
                "accountLienData": [
                  {
                    "accountNumber": "4792880728",
                    "productId": "59895a71-f447-41a7-8423-402c4044856b",
                    "isPlaceLien": true,
                    "lienAmount": "100",
                    "activeLienRequestId": null,
                    "currency": "NGN"
                  }
                ]
              },
              "customerType": "Individual",
              "creationMode": "Legacy",
              "branch": "S001",
              "branchId": null,
              "withdrawn": false,
              "isDeleted": false,
              "deletedOn": null,
              "rejectionDocument": null,
              "rejectionReason": null,
              "createdAt": "2024-04-02T16:34:28.541Z",
              "updatedAt": "2024-04-02T16:36:12.399Z"
            },
            {
              "requestId": "ad2a9e11-7ab6-477d-b62c-11f4f31271a1",
              "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
              "requestTitle": "Creation of Adetola Ayomide",
              "requestType": "Creation",
              "requestSubType": null,
              "accountNumber": null,
              "justification": null,
              "initiator": "Harry Kane",
              "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
              "status": "Approved",
              "approvalStatus": "Approved",
              "approver": "Michael Jackson",
              "approverId": "b86b0505-aedf-4a7d-b948-665b507b53de",
              "data": {
                "customerData": [
                  {
                    "sectionName": "biodata",
                    "data": {
                      "surname": "Adetola",
                      "firstName": "Ayomide",
                      "stateOfOrigin": "",
                      "lga": "",
                      "gender": "Male",
                      "maritalStatus": "Single",
                      "country": "Select Country",
                      "dualCitizenship": "No"
                    },
                    "pageId": "16667844047024844404",
                    "sectionId": "16667844112065919555"
                  },
                  {
                    "sectionName": "identityVerification",
                    "data": {
                      "bvn": "22113344556"
                    },
                    "pageId": "16667844047024844404",
                    "sectionId": "16686080911868326167"
                  },
                  {
                    "sectionName": "contactInformation",
                    "data": {
                      "detailedDescriptionOfAddress": "",
                      "mobileNumber": "",
                      "alternateMobileNumber": "",
                      "ci_stateOfOrigin": "",
                      "ci_lga": "",
                      "residentialAddress": "10, Mobolaji crescent",
                      "mailingAddress": "ayomideadetola@gmail.com"
                    },
                    "pageId": "16667844047024844404",
                    "sectionId": "16733527390997989957"
                  },
                  {
                    "sectionName": "detailsOfSpouse",
                    "data": {
                      "detailedDescriptionOfResidentialAddress": "",
                      "mobileNumber": "",
                      "alternateMobileNumber": ""
                    },
                    "pageId": "16667844047024844404",
                    "sectionId": "16741206899292354242"
                  },
                  {
                    "sectionName": "employmentDetails",
                    "data": {
                      "detailedDecsriptionOfEmployersAddress": "",
                      "employersMobileNumber": "",
                      "employersAlternativeNumber": "",
                      "ed_lga": ""
                    },
                    "pageId": "16667844047024844404",
                    "sectionId": "16835777764642564094"
                  },
                  {
                    "sectionName": "documentation-SECTIONLESS",
                    "data": {
                      "customerSignature": "[{\"signedUrl\":\"https://revent-sterling-services.s3.amazonaws.com/CustomerDocument-International%20passport.jpg0ps2a3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAUEFPZCRBUP25HJJY%2F20240402%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240402T101039Z&X-Amz-Expires=604800&X-Amz-Signature=52f71e6a24ec69605bd7207779a1d60e1a4d497ee12969388c8aa3bbeb1a46cc&X-Amz-SignedHeaders=host\"}]",
                      "validId": "[]",
                      "proofOfResidenceAddress": "[]",
                      "residentialPermit": "[]",
                      "marriageCertificate": "[]",
                      "letterFromEmployerSchoolNusc": "[]",
                      "independentSatisfactoryReference": "[]",
                      "customerPhoto": "[{\"signedUrl\":\"https://revent-sterling-services.s3.amazonaws.com/CustomerDocument-MicrosoftTeams-image%20%28John%20Doe%20Individual%29.pdf9b7el8?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAUEFPZCRBUP25HJJY%2F20240402%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240402T101057Z&X-Amz-Expires=604800&X-Amz-Signature=e2dfa2db94336a51ff9245242ac29fc246a75921a53f4bdba32b65c582885a8c&X-Amz-SignedHeaders=host\"}]",
                      "otherUncategorisedDocuments": "[]"
                    },
                    "pageId": "16843532234632058630",
                    "sectionId": ""
                  }
                ],
                "formInformation": {
                  "formType": "legacy",
                  "formId": "660702ce7a996da8093d75af"
                },
                "riskAssessmentData": [
                  {
                    "sectionName": "Customer's Identity",
                    "data": [
                      {
                        "parameter": "Status of Customer identity verification",
                        "impliedWeight": 10,
                        "parameterOption": "Passed",
                        "assessmentType": "",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 0,
                        "score": 0
                      },
                      {
                        "parameter": "Is Customer a Politically Exposed Person?",
                        "impliedWeight": 8,
                        "parameterOption": "No",
                        "assessmentType": "CDD",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 20,
                        "score": 1.6
                      },
                      {
                        "parameter": "Customer Persona",
                        "impliedWeight": 5,
                        "parameterOption": "Floating Middle Class",
                        "assessmentType": "CDD",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 10,
                        "score": 0.5
                      }
                    ]
                  },
                  {
                    "sectionName": "Customer's Address",
                    "data": [
                      {
                        "parameter": "Is Customer a Non-Resident?",
                        "impliedWeight": 7,
                        "parameterOption": "No",
                        "assessmentType": "CDD",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 20,
                        "score": 1.4
                      },
                      {
                        "parameter": "Status of customer address verification",
                        "impliedWeight": 10,
                        "parameterOption": "Passed",
                        "assessmentType": "",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 0,
                        "score": 0
                      }
                    ]
                  },
                  {
                    "sectionName": "Customer's Livelihood",
                    "data": [
                      {
                        "parameter": "Status of Customer livelihood verification",
                        "impliedWeight": 10,
                        "parameterOption": "Passed",
                        "assessmentType": "",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 0,
                        "score": 0
                      },
                      {
                        "parameter": "Status of Cross border banking relationship",
                        "impliedWeight": 6,
                        "parameterOption": "No",
                        "assessmentType": "CDD",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 20,
                        "score": 1.2
                      }
                    ]
                  },
                  {
                    "sectionName": "Watchlist",
                    "data": [
                      {
                        "parameter": "Is originating Country a FATF listed country?",
                        "impliedWeight": 7,
                        "parameterOption": "No",
                        "assessmentType": "CDD",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 90,
                        "score": 1.4
                      },
                      {
                        "parameter": "Is Customer on any AML related sanction list?",
                        "impliedWeight": 10,
                        "parameterOption": "No",
                        "assessmentType": "CDD",
                        "escalationFactor": 1,
                        "percentageOptionsWeightAllocation": 0,
                        "score": 0
                      }
                    ]
                  }
                ],
                "tenantId": "79fa72ce-2ff1-48fb-8558-f9b0c9b02fae",
                "requestData": {
                  "initiator": "Harry Kane",
                  "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
                  "requestType": "creation",
                  "tenantId": "79fa72ce-2ff1-48fb-8558-f9b0c9b02fae",
                  "branch": "S001",
                  "creationMode": "Legacy"
                },
                "waiverData": [],
                "productData": [
                  {
                    "productName": "Smart Savers",
                    "productCode": "SAV050",
                    "productId": "6f911609-3728-4974-878f-cbc55386e4b9",
                    "productCategory": "CASA",
                    "productType": "Savings"
                  },
                  {
                    "productName": "Smart Savers",
                    "productCode": "SAV050",
                    "productId": "6f911609-3728-4974-878f-cbc55386e4b9",
                    "productCategory": "CASA",
                    "productType": "Savings"
                  }
                ],
                "branch": "S001",
                "riskData": {
                  "riskScore": "11.00",
                  "riskStatus": "LOW"
                }
              },
              "customerType": "Individual",
              "creationMode": "Legacy",
              "branch": "S001",
              "branchId": null,
              "withdrawn": false,
              "isDeleted": false,
              "deletedOn": null,
              "rejectionDocument": null,
              "rejectionReason": null,
              "createdAt": "2024-04-02T10:12:12.089Z",
              "updatedAt": "2024-04-02T10:13:08.852Z"
            },
            {
              "requestId": "8d01d0f0-c23e-4331-b51c-24e2716c7e4e",
              "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
              "requestTitle": "Restriction Removal from Account Number 4792880728",
              "requestType": "Modification",
              "requestSubType": "account-freeze",
              "accountNumber": "4792880728",
              "justification": "test",
              "initiator": "Harry Kane",
              "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
              "status": "Approved",
              "approvalStatus": "Approved",
              "approver": "Customer Checker",
              "approverId": "05aa59cb-4f51-4704-9b9c-e0560273af8a",
              "data": {
                "isProduct": true,
                "accountNumber": "4792880728",
                "accountFreezeData": [
                  {
                    "accountNumber": "4792880728",
                    "freezeCode": "000"
                  }
                ]
              },
              "customerType": "Individual",
              "creationMode": "Legacy",
              "branch": "S001",
              "branchId": null,
              "withdrawn": false,
              "isDeleted": false,
              "deletedOn": null,
              "rejectionDocument": null,
              "rejectionReason": null,
              "createdAt": "2024-04-02T15:58:19.446Z",
              "updatedAt": "2024-04-02T16:22:36.040Z"
            },
            {
              "requestId": "e3f0b3e2-5c01-4366-85f0-302736112b5d",
              "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
              "requestTitle": "Restriction Removal from Account Number 4792880728",
              "requestType": "Modification",
              "requestSubType": "account-lien",
              "accountNumber": "4792880728",
              "justification": "test",
              "initiator": "Harry Kane",
              "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
              "status": "Approved",
              "approvalStatus": "Approved",
              "approver": "Michael Jackson",
              "approverId": "b86b0505-aedf-4a7d-b948-665b507b53de",
              "data": {
                "isProduct": true,
                "accountNumber": "4792880728",
                "accountLienData": [
                  {
                    "accountNumber": "4792880728",
                    "productId": "59895a71-f447-41a7-8423-402c4044856b",
                    "isPlaceLien": false,
                    "activeLienRequestId": "bc5cec7f-71dc-45bc-9371-69bef620e090",
                    "lienAmount": 100,
                    "currency": "NGN"
                  }
                ]
              },
              "customerType": "Individual",
              "creationMode": "Legacy",
              "branch": "S001",
              "branchId": null,
              "withdrawn": false,
              "isDeleted": false,
              "deletedOn": null,
              "rejectionDocument": null,
              "rejectionReason": null,
              "createdAt": "2024-04-02T16:37:59.432Z",
              "updatedAt": "2024-04-02T16:38:28.494Z"
            },
            {
              "requestId": "f212c034-4378-47ee-85e1-b20ecce723c9",
              "customerId": "938e8c9a-3970-430d-b346-5e7fa9c74139",
              "requestTitle": "Modification of Adetola Ayomide",
              "requestType": "Modification",
              "requestSubType": null,
              "accountNumber": null,
              "justification": null,
              "initiator": "Harry Kane",
              "initiatorId": "ab1ef73f-adca-490f-9835-aec8ba06e2b6",
              "status": "Approved",
              "approvalStatus": "Approved",
              "approver": "Michael Jackson",
              "approverId": "b86b0505-aedf-4a7d-b948-665b507b53de",
              "data": {
                "productData": [
                  {
                    "productName": "Techno Product",
                    "productCode": "SAV088",
                    "productId": "59895a71-f447-41a7-8423-402c4044856b",
                    "productCategory": "CASA",
                    "productType": "Savings"
                  }
                ],
                "tierUpgradeData": [],
                "tenantId": "79fa72ce-2ff1-48fb-8558-f9b0c9b02fae",
                "branch": "S001",
                "formType": "legacy"
              },
              "customerType": "Individual",
              "creationMode": "Legacy",
              "branch": "S001",
              "branchId": null,
              "withdrawn": false,
              "isDeleted": false,
              "deletedOn": null,
              "rejectionDocument": null,
              "rejectionReason": null,
              "createdAt": "2024-04-02T15:45:29.233Z",
              "updatedAt": "2024-04-02T15:46:07.058Z"
            }
          ],
          "customer_products": [
            {
              "productCategory": "CASA",
              "productType": "Savings",
              "accountNumber": "7763696535"
            }
          ]
        }
      ]
    }
  }),
  useGetCustomerProfileQuery: jest.fn().mockReturnValue({
    data: {}
  }),
  useGetAccountDataByIdQuery: jest.fn().mockReturnValue({
    data: {}
  }),
  useUploadDocumentMutation: jest.fn().mockReturnValue([
    jest.fn(),
    {data: {}}
  ])
}))

describe('onProceed', () => {
  it('should call preCreateInvestment when formData.id is falsy', () => {
    const data = {};
    const proceed = jest.fn();
    const formData = { id: null, customerBookingInfoModel: {} };
    const setFormData = jest.fn();
    const preCreateInvestment = jest.fn();
    const preModifyRequest = jest.fn();

    onProceed(data, proceed, formData, setFormData, preCreateInvestment, preModifyRequest);

    expect(preCreateInvestment).toHaveBeenCalledWith({
      ...formData,
      customerBookingInfoModel: {
        ...formData.customerBookingInfoModel,
        ...data,
      },
      isDraft: true,
    });
    expect(preModifyRequest).not.toHaveBeenCalled();
    expect(setFormData).toHaveBeenCalledWith({
      ...formData,
      customerBookingInfoModel: { ...formData.customerBookingInfoModel, ...data },
    });
    expect(proceed).toHaveBeenCalled();
  });

  it('should call preModifyRequest when formData.id is truthy', () => {
    const data = {};
    const proceed = jest.fn();
    const formData = { id: 123, customerBookingInfoModel: {} };
    const setFormData = jest.fn();
    const preCreateInvestment = jest.fn();
    const preModifyRequest = jest.fn();

    onProceed(data, proceed, formData, setFormData, preCreateInvestment, preModifyRequest);

    expect(preModifyRequest).toHaveBeenCalledWith({
      ...formData,
      customerBookingInfoModel: {
        ...formData.customerBookingInfoModel,
        ...data,
      },
      isDraft: true,
    });
    expect(preCreateInvestment).not.toHaveBeenCalled();
    expect(setFormData).toHaveBeenCalledWith({
      ...formData,
      customerBookingInfoModel: { ...formData.customerBookingInfoModel, ...data },
    });
    expect(proceed).toHaveBeenCalled();
  });
});


describe("CustomerInformation", () => {
  const formData = { id: null, customerBookingInfoModel: {} };
  it("Should render", () => {
    renderWithProviders(<CustomerInformation formData={formData} proceed={jest.fn()} 
    setDisabled={jest.fn()} setFormData={jest.fn()}/>);
    screen.debug();
  })
})