import {render, screen, fireEvent} from "@testing-library/react";
import {TabHeader, TabContent, CustomerDetail} from "../../../components/modals/CustomerDetail"

describe('TabHeader', () => {

    // Renders the component without crashing
    it('should render TabHeader component without crashing', () => {
      render(<TabHeader title="Test Title" active={[]} />);
    });

    // Displays the title passed as prop
    it('should display the title passed as prop', () => {
      const { getByText } = render(<TabHeader title="Test Title" active={[]} />);
      expect(getByText('Test Title')).toBeInTheDocument();
    });

    // Displays the right caret icon when title is not active
    it('should display the right caret icon when title is not active', () => {
      const { getByTestId } = render(<TabHeader title="Test Title" active={[]} />);
      expect(getByTestId('caret-icon')).toHaveClass('text-red-600');
    });
});

describe('TabContent', () => {

    // Renders the correct number of items in the content array
    it('should render correct number of items', () => {
      const content = [
        { key: 'key1', label: 'Label 1', type: 'text' },
        { key: 'key2', label: 'Label 2', type: 'text' },
        { key: 'key3', label: 'Label 3', type: 'text' },
      ];
      const detail = {
        key1: 'Value 1',
        key2: 'Value 2',
        key3: 'Value 3',
      };
  
      render(<TabContent title="Title" content={content} detail={detail} />);
  
      const items = screen.getAllByTestId('tab-content-item');
      expect(items.length).toBe(content.length);
    });

    // Renders the correct label for each item in the content array
    it('should render correct labels for each item', () => {
      const content = [
        { key: 'key1', label: 'Label 1', type: 'text' },
        { key: 'key2', label: 'Label 2', type: 'text' },
        { key: 'key3', label: 'Label 3', type: 'text' },
      ];
      const detail = {
        key1: 'Value 1',
        key2: 'Value 2',
        key3: 'Value 3',
      };
  
      render(<TabContent title="Title" content={content} detail={detail} />);
  
      const labels = screen.getAllByTestId('tab-content-label');
      expect(labels.map((label) => label.textContent)).toEqual(content.map((item) => item.label));
    });

    // Renders the correct value for each item in the content array
    it('should render correct values for each item', () => {
      const content = [
        { key: 'key1', label: 'Label 1', type: 'text' },
        { key: 'key2', label: 'Label 2', type: 'text' },
        { key: 'key3', label: 'Label 3', type: 'text' },
      ];
      const detail = {
        key1: 'Label 1',
        key2: 'Label 2',
        key3: 'Label 3',
      };
  
      render(<TabContent title="Title" content={content} detail={detail} />);
  
      const values = screen.getAllByTestId('tab-content-label');
      expect(values.map((value) => value.textContent)).toEqual(Object.values(detail));
    });

    // Handles correctly when content array is empty
    it('should handle empty content array', () => {
      const content = [];
      const detail = {
        key1: 'Value 1',
        key2: 'Value 2',
        key3: 'Value 3',
      };
  
      render(<TabContent title="Title" content={content} detail={detail} />);
  
      const items = screen.queryAllByTestId('tab-content-item');
      expect(items.length).toBe(0);
    });

    // // Handles correctly when detail object is empty
    // it('should handle empty detail object', () => {
    //   const content = [
    //     { key: 'key1', label: 'Label 1', type: 'text' },
    //     { key: 'key2', label: 'Label 2', type: 'text' },
    //     { key: 'key3', label: 'Label 3', type: 'text' },
    //   ];
    //   const detail = {};
  
    //   render(<TabContent title="Title" content={content} detail={detail} />);
  
    //   const values = screen.getAllByTestId('tab-content-label');
    //   expect(values.map((value) => value.textContent)).toEqual(['Label 1', 'Label 2', 'Label 3']);
    // });

    // // Handles correctly when item type is not recognized
    // it('should handle unrecognized item type', () => {
    //   const content = [
    //     { key: 'key1', label: 'Label 1', type: 'text' },
    //     { key: 'key2', label: 'Label 2', type: 'unknown' },
    //     { key: 'key3', label: 'Label 3', type: 'text' },
    //   ];
    //   const detail = {
    //     key1: 'Value 1',
    //     key2: 'Value 2',
    //     key3: 'Value 3',
    //   };
  
    //   render(<TabContent title="Title" content={content} detail={detail} />);
  
    //   const values = screen.getAllByTestId('tab-content-value');
    //   expect(values.map((value) => value.textContent)).toEqual(['Value 1', '-', 'Value 3']);
    // });
});

// Generated by CodiumAI

describe('CustomerDetail', () => {

    // Toggles tab content when tab header is clicked
    it('should toggle tab content when tab header is clicked', () => {
      // Arrange
      const isOpen = true;
      const setIsOpen = jest.fn();
      const detail = {
        firstName: 'John',
        otherNames: 'Doe',
        surname: 'Smith',
        customerPhoto: '[{"signedUrl": "https://example.com/photo.jpg"}]',
        validId: '[{"id": "1234567890"}]',
      };

      // Act
      render(<CustomerDetail isOpen={isOpen} setIsOpen={setIsOpen} detail={detail} />);
      fireEvent.click(screen.getByTestId('tab-header'));

      // Assert
      expect(screen.getByTestId('tab-content')).toBeInTheDocument();
    });

    // Handles case when customer photo is not provided
    it('should handle case when customer photo is not provided', () => {
      // Arrange
      const isOpen = true;
      const setIsOpen = jest.fn();
      const detail = {
        firstName: 'John',
        otherNames: 'Doe',
        surname: 'Smith',
        validId: '[{"id": "1234567890"}]',
      };

      // Act
      render(<CustomerDetail isOpen={isOpen} setIsOpen={setIsOpen} detail={detail} />);

      // Assert
      expect(screen).toMatchSnapshot();
    });

    // Handles case when valid ID is not provided
    it('should handle case when valid ID is not provided', () => {
      // Arrange
      const isOpen = true;
      const setIsOpen = jest.fn();
      const detail = {
        firstName: 'John',
        otherNames: 'Doe',
        surname: 'Smith',
        customerPhoto: '[{"signedUrl": "https://example.com/photo.jpg"}]',
      };

      // Act
      render(<CustomerDetail isOpen={isOpen} setIsOpen={setIsOpen} detail={detail} />);

      // Assert
      expect(screen).toMatchSnapshot();
    });

    // Handles case when tab content data is not provided
    it('should handle case when tab content data is not provided', () => {
      // Arrange
      const isOpen = true;
      const setIsOpen = jest.fn();
      const detail = {
        firstName: 'John',
        otherNames: 'Doe',
        surname: 'Smith',
        customerPhoto: '[{"signedUrl": "https://example.com/photo.jpg"}]',
        validId: '[{"id": "1234567890"}]',
      };
      const emptyDetailData = [];

      // Act
      render(<CustomerDetail isOpen={isOpen} setIsOpen={setIsOpen} detail={detail} />);
      fireEvent.click(screen.getByTestId('tab-header'));

      // Assert
      expect(screen.queryByTestId('tab-content')).not.toBeInTheDocument();
    });
});
