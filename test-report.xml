<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/IndexComponent.test.tsx">
    <testCase name="IndexComponent Renders without error" duration="1444"/>
    <testCase name="IndexComponent should display the TopBar component" duration="320"/>
    <testCase name="handleToggle should set isChecker to true and hideCreate to true when selected option includes &quot;approved&quot;" duration="4"/>
    <testCase name="handleToggle should set isChecker to true and hideCreate to true when selected option includes &quot;sent&quot;" duration="2"/>
    <testCase name="handleToggle should set isChecker to false and hideCreate to false when selected option does not include &quot;approved&quot; or &quot;sent&quot;" duration="2"/>
    <testCase name="handleToggle should not throw an error and change values to &apos;false&apos; when selected values when selected value is null" duration="3"/>
    <testCase name="handleToggle should not throw an error and change values to &apos;false&apos; when selected values does not have a text property" duration="2"/>
    <testCase name="handleToggle should not throw an error and change values to &apos;false&apos; when selected values when selected value has a null text property" duration="2"/>
    <testCase name="handleChange should update query object with selected filter and reset page to 1" duration="10"/>
    <testCase name="handleChange should set status_In property of query object to null when activeType is &quot;all&quot;" duration="1"/>
    <testCase name="handleChange should update query object when activeType is not a valid string" duration="4"/>
    <testCase name="handleChange should update query object when category is not a valid string" duration="2"/>
    <testCase name="handleRefresh should call getProducts and prodStatRefetch with updated query when category is AllProducts" duration="1"/>
    <testCase name="handleRefresh should call getRequests and requestRefetch with updated query when category is Requests" duration="1"/>
    <testCase name="handleRefresh should call getRequests and RequestRefetch when category is undefined" duration="2"/>
    <testCase name="handleRefresh should call getProducts and getStatRefresh when StatusCategory type === &apos;all products&apos; " duration="1"/>
    <testCase name="handleSearch Should call setQuery with the provided values" duration="4"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/pages/investment/term-deposit/create-term-deposit/IndexComponent.test.tsx">
    <testCase name="IndexComponent renders" duration="1470"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/forms/MinMaxInput.test.tsx">
    <testCase name="MinMaxInput should render an input field with default value and placeholder" duration="130"/>
    <testCase name="MinMaxInput should allow user input and trigger change event" duration="19"/>
    <testCase name="MinMaxInput should clear errors when input value changes" duration="23"/>
    <testCase name="MinMaxInput should display red border when there is an error" duration="12"/>
    <testCase name="MinMaxInput should not display red border when there is no error" duration="11"/>
    <testCase name="MinMaxInput should display default placeholder if not provided" duration="8"/>
    <testCase name="MinMaxInput renders without errors" duration="66"/>
    <testCase name="MinMaxInput handles value change" duration="9"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/Select.test.tsx">
    <testCase name="Select renders without crashing" duration="205"/>
    <testCase name="Select matches snapshot" duration="102"/>
    <testCase name="Select shows the selected option" duration="82"/>
    <testCase name="Select opens the dropdown when clicked" duration="182"/>
    <testCase name="Select calls onChange when option selected" duration="475"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/table/index.test.tsx">
    <testCase name="handleProductsDropdown should return an array of dropdown options based on the status parameter" duration="9"/>
    <testCase name="handleProductsDropdown should filter out options based on the isChecker parameter" duration="2"/>
    <testCase name="handleProductsDropdown should filter out options based on the permissions parameter" duration="2"/>
    <testCase name="TableComponent should render a table with headers and rows" duration="191"/>
    <testCase name="TableComponent should display a loading indicator when data is being fetched" duration="12"/>
    <testCase name="TextCellContent renders text content and dot correctly" duration="5"/>
    <testCase name="TextCellContent renders &quot;-&quot; when value is falsy" duration="5"/>
    <testCase name="ProductNameCellContent renders product code correctly" duration="5"/>
    <testCase name="ProductNameCellContent renders &quot;-&quot; when product code is falsy" duration="7"/>
    <testCase name="UpdatedOnCellContent should render the date and time in the correct format" duration="87"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is null or undefined" duration="5"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is not a valid date" duration="112"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is not a string or a date object" duration="3"/>
    <testCase name="UpdatedOnCellContent should render the date and time in the correct format for a different timezone" duration="24"/>
    <testCase name="StateCellContent should render a span element with the given value as its text content" duration="3"/>
    <testCase name="StateCellContent should apply a class to the span element based on the value passed to the function" duration="28"/>
    <testCase name="StatusCellContent should render a span element with the specific class based on the value passed as props" duration="9"/>
    <testCase name="StatusCellContent should call handleUserView function to determine the text content of the span element" duration="57"/>
    <testCase name="StatusCellContent should call handleColorState function to determine the background color of the span element" duration="97"/>
    <testCase name="StatusCellContent should render a span element with the default class and value as text content when the value passed as props does not match any of the cases in handleUserView and handleColorState" duration="7"/>
    <testCase name="StatusCellContent should default the isChecker prop to false if it is not a boolean" duration="6"/>
    <testCase name="StatusCellContent should render a FaEye icon next to the text content" duration="3"/>
    <testCase name="ActionsCellContent should render a DropdownButton component with the given dropDownOptions and onClick props" duration="43"/>
    <testCase name="ActionsCellContent should render a DropdownButton component with empty options when dropDownOptions prop is not provided" duration="567"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/DateSelect.test.tsx">
    <testCase name="DateSelect renders without errors" duration="494"/>
    <testCase name="DateSelect Shows datePicker on button click" duration="1133"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Dropdown.test.tsx">
    <testCase name="Dropdown renders without crashing" duration="62"/>
    <testCase name="Dropdown matches snapshot" duration="89"/>
    <testCase name="Dropdown selects the right icon" duration="16"/>
    <testCase name="Dropdown renders right icon when button is clicked" duration="247"/>
    <testCase name="Dropdown applies active class to the selected option" duration="122"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/ComboSelect.test.tsx">
    <testCase name="ComboSelect renders without crashing" duration="150"/>
    <testCase name="ComboSelect matches snapshot" duration="27"/>
    <testCase name="ComboSelect should open the dropdown when the button is clicked" duration="93"/>
    <testCase name="ComboSelect should update selected options when all products and their members are selected" duration="116"/>
    <testCase name="ComboSelect should update selected options when a product and its members are deselected" duration="52"/>
    <testCase name="ComboSelect should update selected options when all products and their members are deselected" duration="83"/>
    <testCase name="ComboSelect should filter the options correctly when searching for a product" duration="57"/>
    <testCase name="ComboSelect should update selected options when a product and its members are selected" duration="70"/>
    <testCase name="closeDropdown should set isOpen state to false when called with setIsOpen(false)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(undefined)" duration="2"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(null)" duration="2"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(0)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(&quot;&quot;)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen({})" duration="1"/>
    <testCase name="handleChange should add a new product to selOptions if it doesnt exist" duration="3"/>
    <testCase name="handleChange should remove a product from selOptions if it already exists" duration="2"/>
    <testCase name="productContainsMember should return true when the product contains the member" duration="2"/>
    <testCase name="productContainsMember should return false when the product does not contain the member" duration="1"/>
    <testCase name="productContainsMember should return false when the product is empty" duration="2"/>
    <testCase name="productContainsMember should return false when the member is empty" duration="6"/>
    <testCase name="productContainsMember should return false when the member is null" duration="3"/>
    <testCase name="addNewProduct should return a new array with the new product added to the end of the input array" duration="1"/>
    <testCase name="addNewProduct should not modify the input array" duration="4"/>
    <testCase name="addNewProduct should work with an empty input array" duration="1"/>
    <testCase name="createProduct should return an object with &quot;product&quot; and &quot;members&quot; properties when valid id and members are provided" duration="2"/>
    <testCase name="createProduct should return an object with an empty &quot;members&quot; array when no members are provided" duration="1"/>
    <testCase name="createProduct should handle special characters and spaces in id and member names" duration="2"/>
    <testCase name="createProduct should handle a large number of members" duration="1"/>
    <testCase name="createProduct should handle empty strings as id and member names" duration="1"/>
    <testCase name="handleMemberToggle should add member to product when member is not selected" duration="2"/>
    <testCase name="handleMemberToggle should remove member from product when member is already selected" duration="1"/>
    <testCase name="handleMemberToggle should add product and member to selected options when product is not selected" duration="1"/>
    <testCase name="handleMemberToggle should add member to product when product is already selected but with no members" duration="2"/>
    <testCase name="handleMemberToggle should add member to product when product is already selected with other members" duration="23"/>
    <testCase name="addMemberToProduct should add a member to a product with no existing members" duration="10"/>
    <testCase name="addMemberToProduct should add a member to a product with existing members" duration="1"/>
    <testCase name="addMemberToProduct should return the original products array if memberId is undefined" duration="1"/>
    <testCase name="addMemberToProduct should return the original products array if memberId is already in the product" duration="1"/>
    <testCase name="removeMemberFromProduct should remove a member from a product with multiple members" duration="1"/>
    <testCase name="removeMemberFromProduct should remove a member from a product with only one member" duration="36"/>
    <testCase name="removeMemberFromProduct should handle removing a non-existent member from a product" duration="2"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Loader.test.tsx">
    <testCase name="Breadcrumbs renders without crashing" duration="34"/>
    <testCase name="Breadcrumbs matches snapshot" duration="47"/>
    <testCase name="Loader should render Loader component when isOpen is true" duration="161"/>
    <testCase name="Loader should not render Loader component when isOpen is false" duration="5"/>
    <testCase name="Loader should not throw an error when setIsOpen is not provided" duration="180"/>
    <testCase name="Loader should spin the AiOutlineLoading icon when Loader component is rendered" duration="118"/>
    <testCase name="Loader should display the text prop in the Loader component" duration="96"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/product-information.test.tsx">
    <testCase name="ProductInformation should render the form without errors" duration="742"/>
    <testCase name="ProductInformation Changes values" duration="294"/>
    <testCase name="ProductInformation should update character count for product name in real-time" duration="561"/>
    <testCase name="ProductInformation should display negative character count message for product name with more than 50 characters" duration="188"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Breadcrumbs.test.tsx">
    <testCase name="Breadcrumbs renders without crashing" duration="77"/>
    <testCase name="Breadcrumbs matches snapshot" duration="21"/>
    <testCase name="Breadcrumbs displays breadcrumb links" duration="40"/>
    <testCase name="Breadcrumbs Can click on links" duration="8"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/BorderlessSelect.test.tsx">
    <testCase name="BorderlessSelect Renders without error" duration="151"/>
    <testCase name="BorderlessSelect Shows options when input is clicked" duration="90"/>
    <testCase name="BorderlessSelect indicates that input is required" duration="14"/>
    <testCase name="BorderlessSelect indicates error" duration="31"/>
    <testCase name="BorderlessSelect changes value when clicked and hides options" duration="120"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Pages/term-deposit/forms/preview.test.tsx">
    <testCase name="Preview Renders without crashing" duration="479"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/modals/Rejection.test.tsx">
    <testCase name="handleSuccess should set options for ProductSearch component when userIsSuccess is true and branchMembersData is not null or undefined" duration="7"/>
    <testCase name="handleSuccess should not call setUsers when userIsSuccess is false" duration="3"/>
    <testCase name="handleSuccess should call setUsers with an empty array when branchMembersData is an empty array" duration="2"/>
    <testCase name="Rejection should render the Rejection modal with the correct UI and props" duration="580"/>
    <testCase name="Rejection should display the correct title and labels for the form inputs" duration="227"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/FormDate.test.tsx">
    <testCase name="FormDate component should update date on date change" duration="134"/>
    <testCase name="FormDate component should display error message when there is an error" duration="40"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/Sterling-investment.tsx">
    <testCase name="microfrontend bootstraps the app" duration="8"/>
    <testCase name="microfrontend mounts and unmounts" duration="24"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/modals/RequestDeactivation.test.tsx">
    <testCase name="RequestDeactivation should render the component without crashing" duration="230"/>
    <testCase name="RequestDeactivation should display the deactivation request form" duration="60"/>
    <testCase name="RequestDeactivation should allow user to input reason for deactivation" duration="87"/>
    <testCase name="RequestDeactivation should display an error message when the deactivation request fails" duration="75"/>
    <testCase name="RequestDeactivation should allow user to upload supporting documents" duration="67"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/ProductDetail.test.tsx">
    <testCase name="ProductDetail Renders without crashing" duration="357"/>
    <testCase name="ProductDetail should render data rows correctly" duration="9"/>
    <testCase name="ProductDetail should render product details correctly" duration="118"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/summary/Actions.test.tsx">
    <testCase name="Actions should renderWithProviders a div element with specific class and styling" duration="73"/>
    <testCase name="Actions should call the corresponding functions when Cancel, Modify, or Submit buttons are clicked" duration="19"/>
    <testCase name="Actions should call the corresponding functions when Print, Share, or Return to dashboard buttons are clicked" duration="22"/>
    <testCase name="Actions should set the confirm text to &quot;Product creation approve&quot; when sub_type is not provided and action is &quot;approve&quot;" duration="11"/>
    <testCase name="Actions should set the confirm text to &quot;Product creation reject&quot; when sub_type is not provided and action is &quot;reject&quot;" duration="10"/>
    <testCase name="Actions should set the confirm text to &quot;Product activation approve&quot; when sub_type is &quot;activation&quot; and action is &quot;approve&quot;" duration="8"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/investment/dashboard/TableComponent.test.tsx">
    <testCase name="handleDropdown should return an array of options based on the status, isChecker, locked, and permissions parameters" duration="11"/>
    <testCase name="handleDropdown should filter out &quot;deactivate&quot; and &quot;activate&quot; options if user does not have &quot;CREATE_PRODUCT&quot; permission" duration="3"/>
    <testCase name="handleDropdown should filter out &quot;modify&quot; option if user does not have &quot;CREATE_PRODUCT&quot; permission and is not a checker" duration="2"/>
    <testCase name="handleDropdown should return an array with only &quot;view&quot; option if locked parameter is true and &quot;view&quot; option exists" duration="2"/>
    <testCase name="handleDropdown should return an empty array if locked parameter is true and &quot;view&quot; option does not exist" duration="1"/>
    <testCase name="handleDropdown should return an array with only &quot;view&quot; option if isChecker parameter is true and &quot;view&quot; option exists" duration="1"/>
    <testCase name="handleHeaders should filter out &apos;created_by&apos; when isChecker is true" duration="1"/>
    <testCase name="handleHeaders should filter out &apos;approved_By&apos; when isChecker is false" duration="1"/>
    <testCase name="handleDownload should generate CSV for requests category" duration="4"/>
    <testCase name="handleDownload should generate CSV for product category" duration="1"/>
    <testCase name="handleDownload should not generate CSV if downloadData is empty" duration="1"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/forms/MultiSelect.test.tsx">
    <testCase name="MultiSelect renders without crashing" duration="59"/>
    <testCase name="MultiSelect opens and closes dropdown when clicked" duration="44"/>
    <testCase name="MultiSelect should toggle dropdown when button is clicked" duration="67"/>
    <testCase name="MultiSelect should select/deselect option when checkbox is clicked" duration="35"/>
    <testCase name="MultiSelect should render correctly with an empty options array" duration="21"/>
    <testCase name="MultiSelect should check select all" duration="25"/>
    <testCase name="MultiSelect should update checkbox state when props change" duration="16"/>
    <testCase name="closeDropdown should set isOpen state to false when setIsOpen is called with false" duration="1"/>
    <testCase name="closeDropdown should handle setIsOpen being called with a boolean value" duration="2"/>
    <testCase name="handleChange should add a new option to selectedOptions array when it does not exist" duration="1"/>
    <testCase name="handleChange should remove an option from selectedOptions array when it already exists" duration="1"/>
    <testCase name="handleChange should call setSelectedOptions with the same array when an option is already selected" duration="2"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/forms/MultiSelectForm.tsx">
    <testCase name="MultiSelectForm should render a label with the provided labelName prop" duration="44"/>
    <testCase name="MultiSelectForm should render a button with the provided placeholder prop" duration="19"/>
    <testCase name="MultiSelectForm should open a dropdown with options when the button is clicked" duration="72"/>
    <testCase name="MultiSelectForm should handle the case where no options are provided" duration="43"/>
    <testCase name="MultiSelectForm should handle the case where no labelName prop is provided" duration="9"/>
    <testCase name="MultiSelectForm should handle the case where no inputName prop is provided" duration="22"/>
    <testCase name="handleChange should add a new value to selectedOptions array when it doesnt already exist" duration="2"/>
    <testCase name="handleChange should remove a value from selectedOptions array when it already exists" duration="2"/>
    <testCase name="handleChange should handle null or undefined value parameter" duration="4"/>
    <testCase name="handleChange should handle null or undefined setSelectedOptions parameter" duration="29"/>
    <testCase name="handleChange should handle null or undefined id parameter" duration="1"/>
    <testCase name="closeDropdown should set isOpen state to false when called with setIsOpen(false)" duration="2"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen" duration="1"/>
    <testCase name="closeDropdown should not have any side effects other than setting isOpen state to false" duration="2"/>
    <testCase name="closeDropdown should not affect any other state or props" duration="1"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/pricing-config.test.tsx">
    <testCase name="PricingConfig renders without errors" duration="249"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/summary/IndexComponent.test.tsx">
    <testCase name="IndexComponent Renders without crashing" duration="108"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/liquidity-setup.test.tsx">
    <testCase name="LiquiditySetup Renders without error" duration="294"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/FormUpload.test.tsx">
    <testCase name="FormUpload renders without crashing" duration="40"/>
    <testCase name="FormUpload matches snapshot" duration="24"/>
    <testCase name="FormUpload should reset all state variables when handleReset is called" duration="4"/>
    <testCase name="handleFileChange should select a file and set the file type correctly" duration="3"/>
    <testCase name="handleFileChange should set an error message when the file size exceeds the maximum allowed size" duration="1"/>
    <testCase name="handleFileChange should set an error message when no file is selected" duration="1"/>
    <testCase name="handleFileChange should display an error message when selecting a file with an invalid extension" duration="2"/>
    <testCase name="FormUpload should display error message when selecting a file with an unsupported file type" duration="29"/>
    <testCase name="handleDrag should set dragActive to true when dragenter event is triggered" duration="1"/>
    <testCase name="handleDrag should set dragActive to true when dragover event is triggered" duration="4"/>
    <testCase name="handleDrag should set dragActive to false when dragleave event is triggered" duration="8"/>
    <testCase name="handleReset should reset upload data to an empty array" duration="7"/>
    <testCase name="handleReset should set status to null" duration="14"/>
    <testCase name="handleDrop should read and process a valid file when dropped" duration="4"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="1"/>
    <testCase name="handleDrop should read and process a file with a valid file type when dropped" duration="1"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="4"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="2"/>
    <testCase name="handleDrop should set an error message when the file type is not supported" duration="3"/>
    <testCase name="handleDrop should set the base64 image correctly when the file is read" duration="2"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/forms/MultiSelectForm2.tsx">
    <testCase name="handleChange should add a new value to selectedOptions array when it doesnt already exist" duration="7"/>
    <testCase name="handleChange should remove a value from selectedOptions array when it already exists" duration="14"/>
    <testCase name="handleChange should handle null or undefined value parameter" duration="4"/>
    <testCase name="handleChange should handle null or undefined setSelectedOptions parameter" duration="23"/>
    <testCase name="handleChange should handle null or undefined id parameter" duration="1"/>
    <testCase name="closeDropdown should set isOpen state to false when called with setIsOpen(false)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen" duration="1"/>
    <testCase name="closeDropdown should not have any side effects other than setting isOpen state to false" duration="1"/>
    <testCase name="closeDropdown should not affect any other state or props" duration="2"/>
    <testCase name="MultiSelectForm2 should render a label with the provided labelName prop" duration="36"/>
    <testCase name="MultiSelectForm2 should render a search input with the provided placeholder prop" duration="14"/>
    <testCase name="MultiSelectForm2 should render a list of options with checkboxes" duration="8"/>
    <testCase name="MultiSelectForm2 should render a default placeholder when no placeholder prop is provided" duration="7"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/modals/ProductDetail.test.tsx">
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/customer-eligibility-criteria.test.tsx">
    <testCase name="ProductInformation Renders without error" duration="198"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/CustomComboSelect.test.tsx">
    <testCase name="CustomComboSelect Renders without errors" duration="53"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/StatusCard.test.tsx">
    <testCase name="StatusCard Renders without error" duration="59"/>
    <testCase name="StatusButton Renders without error" duration="20"/>
    <testCase name="StatusButton Shows spinner while loading" duration="13"/>
    <testCase name="sortOptions Sorts and returns expected options in &apos;all products&apos; category" duration="39"/>
    <testCase name="sortOptions Sorts and returns expected options in &apos;requests&apos; category" duration="2"/>
    <testCase name="StatusCategoryButton Renders without error" duration="6"/>
    <testCase name="handleActiveType Sets status to &quot;&quot; when activeType === all " duration="2"/>
    <testCase name="handleActiveType Sets status according to various activeTypes" duration="4"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/InfoLabel.test.tsx">
    <testCase name="InfoLabel Renders without errors" duration="58"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Button.test.tsx">
    <testCase name="Button renders without crashing" duration="36"/>
    <testCase name="Button renders children" duration="5"/>
    <testCase name="Button applies custom className" duration="10"/>
    <testCase name="Button can show loader" duration="9"/>
    <testCase name="Button can hide loader" duration="11"/>
    <testCase name="Button can render button elements" duration="5"/>
    <testCase name="Button calls onClick handler" duration="11"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/TopBar.test.tsx">
    <testCase name="Tabs should renderWithProviders a list of tabs with titles and urls" duration="75"/>
    <testCase name="should set active tab and update search term" duration="35"/>
    <testCase name="renderWithProviderss TopBar component" duration="40"/>
    <testCase name="getSearchResult should call getProducts with correct parameters and set search results" duration="3"/>
    <testCase name="getSearchResult should set search results to empty array when given empty string value" duration="1"/>
    <testCase name="Tabs should renderWithProviders tabs with correct titles and styles" duration="25"/>
    <testCase name="Tabs should update active tab and navigate to correct URL when a tab is clicked" duration="33"/>
    <testCase name="TopBar should renderWithProviders the top bar component without errors" duration="15"/>
    <testCase name="TopBar should display the Product Factory title" duration="31"/>
    <testCase name="TopBar should display the Create new product button" duration="23"/>
    <testCase name="TopBar should disable the Create new product button when permissions are not provided" duration="15"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/App.test.tsx">
    <testCase name="Test App Component If App is rendered wihout issues" duration="34"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Pages/term-deposit/forms/accounting-entries-and-events.test.tsx">
    <testCase name="AccountingEntriesAndEvents Renders without error" duration="103"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/Checkbox.test.tsx">
    <testCase name="Checkbox renders without crashing" duration="39"/>
    <testCase name="Checkbox matches snapshot" duration="17"/>
    <testCase name="Checkbox displays the label" duration="12"/>
    <testCase name="Checkbox initially renders unchecked" duration="11"/>
    <testCase name="Checkbox renders checked when checked prop is true" duration="6"/>
    <testCase name="Checkbox calls onChange when clicked" duration="18"/>
    <testCase name="Checkbox should not call onChange if not provided when handleChange is invoked" duration="8"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/FormStepComponent.test.tsx">
    <testCase name="FormStepComponent should render the correct number of form step items when formStepItems is not empty" duration="32"/>
    <testCase name="FormStepComponent should render the correct label for each form step item when formStepItems is not empty" duration="29"/>
    <testCase name="FormStepComponent should render the correct index for each form step item when formStepItems is not empty" duration="9"/>
    <testCase name="FormStepComponent should handle empty formStepItems array and render default form step item" duration="5"/>
    <testCase name="FormStepComponent should handle step value greater than the number of formStepItems and render last form step item" duration="8"/>
    <testCase name="FormStepComponent should handle step value less than 1 and render first form step item" duration="11"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Pages/term-deposit/forms/toggle-input-children.test.tsx">
  </file>
</testExecutions>