<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/pages/management/book-investment/FormComponent.test.tsx">
    <testCase name="code snippet should render the customer information form when step is 1" duration="980"/>
    <testCase name="code snippet should render the customer information form when step is 2" duration="77">
      <failure message="TypeError: setProductDetail is not a function"><![CDATA[TypeError: setProductDetail is not a function
    at /Users/work/Documents/retailcore-mfe-investment-management/src/components/pages/management/book-investment/FacilityDetails.tsx:209:7
    at invokePassiveEffectCreate (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom.development.js:23487:20)
    at HTMLUnknownElement.callCallback (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom.development.js:3945:14)
    at HTMLUnknownElement.callTheUserObjectsOperation (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
    at innerInvokeEventListeners (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:338:25)
    at invokeEventListeners (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3)
    at HTMLUnknownElementImpl._dispatch (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9)
    at HTMLUnknownElementImpl.dispatchEvent (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17)
    at HTMLUnknownElement.dispatchEvent (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34)
    at Object.invokeGuardedCallbackDev (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom.development.js:3994:16)
    at invokeGuardedCallback (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom.development.js:4056:31)
    at flushPassiveEffectsImpl (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom.development.js:23574:9)
    at unstable_runWithPriority (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/scheduler/cjs/scheduler.development.js:468:12)
    at runWithPriority$1 (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom.development.js:11276:10)
    at flushPassiveEffects (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom.development.js:23447:14)
    at Object.<anonymous>.flushWork (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom-test-utils.development.js:992:10)
    at act (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/react-dom/cjs/react-dom-test-utils.development.js:1107:9)
    at render (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/@testing-library/react/dist/pure.js:97:26)
    at renderWithProviders (/Users/work/Documents/retailcore-mfe-investment-management/src/__mocks__/api/Wrapper.tsx:40:28)
    at Object.<anonymous> (/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/pages/management/book-investment/FormComponent.test.tsx:44:50)
    at Promise.then.completed (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/utils.js:391:28)
    at new Promise (<anonymous>)
    at callAsyncCircusFn (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/utils.js:316:10)
    at _callCircusTest (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/run.js:218:40)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at _runTest (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/run.js:155:3)
    at _runTestsForDescribeBlock (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/run.js:66:9)
    at _runTestsForDescribeBlock (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/run.js:60:9)
    at run (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/run.js:25:3)
    at runAndTransformResultsToJestFormat (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:170:21)
    at jestAdapter (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:82:19)
    at runTestInternal (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-runner/build/runTest.js:389:16)
    at runTest (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-runner/build/runTest.js:475:34)
    at Object.worker (/Users/work/Documents/retailcore-mfe-investment-management/node_modules/jest-runner/build/testWorker.js:133:12)]]></failure>
    </testCase>
    <testCase name="code snippet should allow the user to input customer information" duration="182"/>
    <testCase name="code snippet should handle invalid input data correctly" duration="210"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/MessagesComponent.test.tsx">
    <testCase name="MessagesComponent renders confirm message without error" duration="543"/>
    <testCase name="MessagesComponent calls handleConfirm and calls setIsConfirmOpen with false when Confirm button is clicked" duration="339"/>
    <testCase name="MessagesComponent calls setIsConfirmOpen with false when cancel button is clicked" duration="262"/>
    <testCase name="MessagesComponent Renders success message" duration="283"/>
    <testCase name="MessagesComponent returns user to dashboard when user clicks on the dashboard link" duration="183"/>
    <testCase name="MessagesComponent Renders Failure message" duration="365"/>
    <testCase name="MessagesComponent Renders Detail component" duration="727"/>
    <testCase name="MessagesComponent Renders Deactivation modals" duration="108"/>
    <testCase name="MessagesComponent Renders loading while deleteLoading == true" duration="67"/>
    <testCase name="MessagesComponent Renders loading while deleteLoading == true" duration="43"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/table/index.test.tsx">
    <testCase name="handleProductsDropdown should return an array of dropdown options based on the status parameter" duration="16"/>
    <testCase name="handleProductsDropdown should filter out options based on the isChecker parameter" duration="6"/>
    <testCase name="handleProductsDropdown should filter out options based on the permissions parameter" duration="17"/>
    <testCase name="TableComponent should render a table with headers and rows" duration="312"/>
    <testCase name="TableComponent should display a loading indicator when data is being fetched" duration="11"/>
    <testCase name="TextCellContent renders text content and dot correctly" duration="5"/>
    <testCase name="TextCellContent renders &quot;-&quot; when value is falsy" duration="7"/>
    <testCase name="TextCellContent should render nothing when value is null or undefined" duration="30"/>
    <testCase name="ProductNameCellContent renders product code correctly" duration="18"/>
    <testCase name="ProductNameCellContent renders &quot;-&quot; when product code is falsy" duration="6"/>
    <testCase name="UpdatedOnCellContent should render the date and time in the correct format" duration="10"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is null or undefined" duration="7"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is not a valid date" duration="131"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is not a string or a date object" duration="14"/>
    <testCase name="UpdatedOnCellContent should render the date and time in the correct format for a different timezone" duration="18"/>
    <testCase name="StateCellContent should render a span element with the given value as its text content" duration="11"/>
    <testCase name="StateCellContent should apply a class to the span element based on the value passed to the function" duration="6"/>
    <testCase name="StatusCellContent should render a span element with the specific class based on the value passed as props" duration="10"/>
    <testCase name="StatusCellContent should call handleUserView function to determine the text content of the span element" duration="12"/>
    <testCase name="StatusCellContent should call handleColorState function to determine the background color of the span element" duration="181"/>
    <testCase name="StatusCellContent should render a span element with the default class and value as text content when the value passed as props does not match any of the cases in handleUserView and handleColorState" duration="5"/>
    <testCase name="StatusCellContent should default the isChecker prop to false if it is not a boolean" duration="15"/>
    <testCase name="StatusCellContent should render a FaEye icon next to the text content" duration="11"/>
    <testCase name="ActionsCellContent should render a DropdownButton component with the given dropDownOptions and onClick props" duration="41"/>
    <testCase name="ActionsCellContent should render a DropdownButton component with empty options when dropDownOptions prop is not provided" duration="142"/>
    <testCase name="handleUpdated should return null when key is &quot;state&quot; and newState is equal to value" duration="5"/>
    <testCase name="handleProductsDropdown should return an array of options based on the status and user permissions" duration="3"/>
    <testCase name="handleProductsDropdown should filter out &quot;deactivate&quot; and &quot;activate&quot; options if user does not have RE_OR_DEACTIVATE_INVESTMENT_PRODUCT permission" duration="11"/>
    <testCase name="handleProductsDropdown should filter out &quot;modify&quot; and &quot;clone&quot; options if user does not have CREATE_INVESTMENT_PRODUCT permission" duration="3"/>
    <testCase name="handleProductsDropdown should return an empty array if status is falsy" duration="3"/>
    <testCase name="handleProductsDropdown should return an empty array if DropDownOptions[status] is falsy" duration="6"/>
    <testCase name="handleUpdated should return null when key is &quot;state&quot; and newState is equal to value" duration="3"/>
    <testCase name="handleProductsDropdown should return an array of options based on the status and user permissions" duration="3"/>
    <testCase name="handleProductsDropdown should filter out &quot;deactivate&quot; and &quot;activate&quot; options if user does not have RE_OR_DEACTIVATE_INVESTMENT_PRODUCT permission" duration="10"/>
    <testCase name="handleProductsDropdown should filter out &quot;modify&quot; and &quot;clone&quot; options if user does not have CREATE_INVESTMENT_PRODUCT permission" duration="3"/>
    <testCase name="handleProductsDropdown should return an empty array if status is falsy" duration="4"/>
    <testCase name="handleProductsDropdown should return an empty array if DropDownOptions[status] is falsy" duration="3"/>
    <testCase name="handleUpdated should return time of update if value was updated" duration="2"/>
    <testCase name="handleUpdated should not return time of update if value was not updated" duration="2"/>
    <testCase name="handleUpdated should handle change of state value" duration="3"/>
    <testCase name="handleUpdated should handle non change of state value" duration="5"/>
    <testCase name="handleUpdated Should return nothing when value is null" duration="4"/>
    <testCase name="statusHandler should set success text and open success modal when isSuccess is true" duration="3"/>
    <testCase name="statusHandler should set success text and open success modal when activateSuccess is true and role is superadmin or admin" duration="11"/>
    <testCase name="statusHandler should set failed text, subtext and open failed modal when isError is true" duration="2"/>
    <testCase name="statusHandler should not set any text or open any modal when none of the boolean flags are true" duration="17"/>
    <testCase name="statusHandler should set failed text and open failed modal when isError is true and error object is null" duration="3"/>
    <testCase name="statusHandler should set failed text and open failed modal when activateIsError is true and activateError object is null" duration="5"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/pages/investment/term-deposit/create-term-deposit/IndexComponent.test.tsx">
    <testCase name="IndexComponent renders" duration="315"/>
    <testCase name="IndexComponent Changes values" duration="812"/>
    <testCase name="IndexComponent Show modal when clicking save to Draft" duration="436"/>
    <testCase name="IndexComponent Shows disabled button when form is not valid" duration="219"/>
    <testCase name="IndexComponent Should not have disabled button when fom is valid" duration="451"/>
    <testCase name="FormComponeent Should render if step === 1" duration="122"/>
    <testCase name="FormComponeent Should render if step === 2" duration="211"/>
    <testCase name="FormComponeent Should render if step === 3" duration="321"/>
    <testCase name="FormComponeent Should render if step === 4" duration="449"/>
    <testCase name="FormComponeent Should render if step === 5" duration="123"/>
    <testCase name="handleNext should call setStep when theres more steps ahead" duration="4"/>
    <testCase name="handleNext should not setStep when there are no steps ahead" duration="4"/>
    <testCase name="handlePrev should call setStep when there are steps behind" duration="22"/>
    <testCase name="handlePrev should not call setStep when user is at the first step" duration="3"/>
    <testCase name="handleDraft should set setIsConfirmOpen to false when called" duration="13"/>
    <testCase name="handleDraft should call modifyProduct with isDraft set to true when process is &quot;modify&quot;" duration="2"/>
    <testCase name="handleDraft should call createProduct with isDraft set to true when process is &quot;create&quot; or &quot;clone&quot;" duration="5"/>
    <testCase name="handleDraft should not call any functions when process is undefined" duration="5"/>
    <testCase name="handleDetailsSuccess should set activeId.current to the id of productDetails when it exists" duration="2"/>
    <testCase name="handleDetailsSuccess should set activeId.current to the id of productDetails when it exists 2" duration="3"/>
    <testCase name="handleDetailsSuccess should update previousData.current with relevant fields from productDetails when process is &quot;modify&quot;" duration="3"/>
    <testCase name="handleDetailsSuccess should update productData with relevant fields from productDetails" duration="2"/>
    <testCase name="handleDetailsSuccess should set pricingConfigurationCopy to an empty object before sorting when it is null" duration="2"/>
    <testCase name="handleDetailsSuccess should not sort pricingConfigurationCopy when interestRateConfigModels is null" duration="2"/>
    <testCase name="handlePreviousData should return an object with all properties from prevProductData and productDetails" duration="3"/>
    <testCase name="handlePreviousData should sort the interestRateConfigModels array in pricingConfigurationCopy by min value" duration="7"/>
    <testCase name="handlePreviousData should return an object with all properties from prevProductData and productDetails when pricingConfigurationCopy is null" duration="3"/>
    <testCase name="handleRequestIsSuccess should update product data when requestIsSuccess is true and metaInfo exists" duration="6"/>
    <testCase name="handleRequestIsSuccess should update product data when requestIsSuccess is true and metaInfo exists and process == withdraw_modify" duration="3"/>
    <testCase name="handleMessage should set success text to &quot;Product Setup saved to draft&quot; and open success modal when isSuccess is true" duration="2"/>
    <testCase name="handleMessage should set success text to &quot;Product Setup saved to draft&quot; and open success modal when modifySuccess is true" duration="4"/>
    <testCase name="handleMessage should set success text to &quot;Product Setup saved to draft&quot; and open success modal when modifyRequestSuccess is true" duration="8"/>
    <testCase name="handleMessage should set failed text to &quot;Unable to save as draft&quot; and set failed subtext to error message when isError is true" duration="6"/>
    <testCase name="handleMessage should set failed text to &quot;Unable to save as draft&quot; and set failed subtext to error message when modifyRequestIsError is true" duration="3"/>
    <testCase name="handleMessage should set failed subtext to empty string when error message is undefined" duration="3"/>
    <testCase name="handleNav should call handleNext when step is less than the length of termDepositFormSteps" duration="3"/>
    <testCase name="handleNav should call navigate with the appropriate URL when step is equal to the length of termDepositFormSteps" duration="2"/>
    <testCase name="handleNav should handle error when navigate function throws an error" duration="13"/>
    <testCase name="handleNav should not include id parameter in URL when id is not provided" duration="2"/>
    <testCase name="handleNav should include id parameter in URL when id is provided" duration="6"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Pages/management/Individual/index.test.tsx">
    <testCase name="IndexComponent Renders without error" duration="527"/>
    <testCase name="handleToggle should set isChecker to true and hideCreate to true when selected option includes &quot;approved&quot;" duration="4"/>
    <testCase name="handleToggle should set isChecker to true and hideCreate to true when selected option includes &quot;sent&quot;" duration="3"/>
    <testCase name="handleToggle should set isChecker to false and hideCreate to false when selected option does not include &quot;approved&quot; or &quot;sent&quot;" duration="8"/>
    <testCase name="handleToggle should not throw an error and change values to &apos;false&apos; when selected values when selected value is null" duration="3"/>
    <testCase name="handleToggle should not throw an error and change values to &apos;false&apos; when selected values does not have a text property" duration="4"/>
    <testCase name="handleToggle should not throw an error and change values to &apos;false&apos; when selected values when selected value has a null text property" duration="17"/>
    <testCase name="handleChange should update query object with selected filter and reset page to 1" duration="4"/>
    <testCase name="handleChange should set status_In property of query object to null when activeType is &quot;all&quot;" duration="12"/>
    <testCase name="handleChange should update query object when activeType is not a valid string" duration="5"/>
    <testCase name="handleChange should update query object when category is not a valid string" duration="3"/>
    <testCase name="handleRefresh should call getProducts and prodStatRefetch with updated query when category is Investments" duration="14"/>
    <testCase name="handleRefresh should call getRequests and requestRefetch with updated query when category is Requests" duration="3"/>
    <testCase name="handleRefresh should call getRequests and RequestRefetch when category is undefined" duration="2"/>
    <testCase name="handleSearch Should call setQuery with the provided values" duration="7"/>
    <testCase name="handleRequestStatus should set request data to an empty array when query page is 1" duration="3"/>
    <testCase name="handleRequestStatus should map over request results and add request status and type names to each item in request data" duration="2"/>
    <testCase name="handleRequestStatus should concatenate new request data to previous request data using setRequestData" duration="2"/>
    <testCase name="handleRequestStatus should not set request data to an empty array when query page is not 1" duration="2"/>
    <testCase name="handleRequestStatus should not add request status and type names when request results is empty" duration="2"/>
    <testCase name="handleRequestStatus should not concatenate new request data when request results is empty" duration="2"/>
    <testCase name="handleProductStatus should set product data to an empty array when query page is 1" duration="3"/>
    <testCase name="handleProductStatus should concatenate fetched data results to previous product data, mapping each result to include state and productType properties" duration="3"/>
    <testCase name="handleProductStatus should set hasMore to true if there is a next page in the fetched data" duration="4"/>
    <testCase name="handleProductStatus should not modify product data when query page is not 1" duration="12"/>
    <testCase name="handleProductStatus should not modify product data when data fetch is not successful" duration="3"/>
    <testCase name="handleProductStatus should not modify product data when fetched data results are empty" duration="14"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/pricing-config.test.tsx">
    <testCase name="PricingConfig renders without errors" duration="333"/>
    <testCase name="validateSlab should return true when type is 0 and lastSlab.principalMax equals principalMax" duration="6"/>
    <testCase name="validateSlab should return true when type is 1 and lastSlab.tenorMax equals tenorMax" duration="18"/>
    <testCase name="validateSlab should return false when type is not 0 or 1" duration="4"/>
    <testCase name="validateSlab should return false when values.interestRateConfigModels is empty" duration="4"/>
    <testCase name="validateSlab should return false when type is not a number" duration="3"/>
    <testCase name="validateSlab should return false when lastSlab is undefined" duration="5"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/modals/Status.test.tsx">
    <testCase name="Success Modal renders without crashing" duration="81"/>
    <testCase name="Success Modal matches snapshot" duration="26"/>
    <testCase name="Success Modal can close modal pathname !== /product-management" duration="342"/>
    <testCase name="Success Modal can close modal when canclose is true" duration="93"/>
    <testCase name="Prompt Modal renders without crashing" duration="5"/>
    <testCase name="Prompt Modal matches snapshot" duration="63"/>
    <testCase name="Prompt Modal can close modal pathname !== /product-management" duration="70"/>
    <testCase name="Prompt Modal can close modal when canclose is true" duration="45"/>
    <testCase name="Failed Modal matches snapshot" duration="10"/>
    <testCase name="Failed Modal can close modal pathname !== /product-management" duration="41"/>
    <testCase name="Failed Modal can close modal when canclose is true" duration="40"/>
    <testCase name="Success should render a success message with given text" duration="65"/>
    <testCase name="Success should render a check circle icon" duration="42"/>
    <testCase name="Success should render a &quot;Return to dashboard&quot; button" duration="37"/>
    <testCase name="Success should render a success message with long text" duration="32"/>
    <testCase name="Success should render a success message with special characters in text" duration="35"/>
  </file>
</testExecutions>