<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/StatusCard.test.tsx">
    <testCase name="StatusCard Renders without error" duration="381"/>
    <testCase name="StatusButton Renders without error" duration="15"/>
    <testCase name="StatusButton Shows spinner while loading" duration="35"/>
    <testCase name="sortOptions Sorts and returns expected options in &apos;all products&apos; category" duration="13"/>
    <testCase name="sortOptions Sorts and returns expected options in &apos;requests&apos; category" duration="5"/>
    <testCase name="StatusCategoryButton Renders without error" duration="17"/>
    <testCase name="handleActiveType Sets status to &quot;&quot; when activeType === all " duration="1"/>
    <testCase name="handleActiveType Sets status according to various activeTypes" duration="3"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/Select.test.tsx">
    <testCase name="Select renders without crashing" duration="371"/>
    <testCase name="Select matches snapshot" duration="74"/>
    <testCase name="Select shows the selected option" duration="76"/>
    <testCase name="Select opens the dropdown when clicked" duration="252"/>
    <testCase name="Select calls onChange when option selected" duration="167"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Dropdown.test.tsx">
    <testCase name="Dropdown renders without crashing" duration="43"/>
    <testCase name="Dropdown matches snapshot" duration="361"/>
    <testCase name="Dropdown selects the right icon" duration="22"/>
    <testCase name="Dropdown renders right icon when button is clicked" duration="312"/>
    <testCase name="Dropdown applies active class to the selected option" duration="116"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Loader.test.tsx">
    <testCase name="Breadcrumbs renders without crashing" duration="20"/>
    <testCase name="Breadcrumbs matches snapshot" duration="55"/>
    <testCase name="Loader should render Loader component when isOpen is true" duration="545"/>
    <testCase name="Loader should not render Loader component when isOpen is false" duration="4"/>
    <testCase name="Loader should not throw an error when setIsOpen is not provided" duration="98"/>
    <testCase name="Loader should spin the AiOutlineLoading icon when Loader component is rendered" duration="110"/>
    <testCase name="Loader should display the text prop in the Loader component" duration="58"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/App.test.tsx">
    <testCase name="Test App Component If App is rendered wihout issues" duration="41"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/ComboSelect.test.tsx">
    <testCase name="ComboSelect renders without crashing" duration="41"/>
    <testCase name="ComboSelect matches snapshot" duration="12"/>
    <testCase name="ComboSelect should open the dropdown when the button is clicked" duration="57"/>
    <testCase name="ComboSelect should update selected options when all products and their members are selected" duration="31"/>
    <testCase name="ComboSelect should update selected options when a product and its members are deselected" duration="92"/>
    <testCase name="ComboSelect should update selected options when all products and their members are deselected" duration="27"/>
    <testCase name="ComboSelect should filter the options correctly when searching for a product" duration="24"/>
    <testCase name="ComboSelect should update selected options when a product and its members are selected" duration="30"/>
    <testCase name="closeDropdown should set isOpen state to false when called with setIsOpen(false)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(undefined)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(null)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(0)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(&quot;&quot;)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen({})" duration="1"/>
    <testCase name="handleChange should add a new product to selOptions if it doesnt exist" duration="5"/>
    <testCase name="handleChange should remove a product from selOptions if it already exists" duration="1"/>
    <testCase name="productContainsMember should return true when the product contains the member" duration="1"/>
    <testCase name="productContainsMember should return false when the product does not contain the member" duration="1"/>
    <testCase name="productContainsMember should return false when the product is empty" duration="0"/>
    <testCase name="productContainsMember should return false when the member is empty" duration="1"/>
    <testCase name="productContainsMember should return false when the member is null" duration="1"/>
    <testCase name="addNewProduct should return a new array with the new product added to the end of the input array" duration="2"/>
    <testCase name="addNewProduct should not modify the input array" duration="1"/>
    <testCase name="addNewProduct should work with an empty input array" duration="0"/>
    <testCase name="createProduct should return an object with &quot;product&quot; and &quot;members&quot; properties when valid id and members are provided" duration="4"/>
    <testCase name="createProduct should return an object with an empty &quot;members&quot; array when no members are provided" duration="1"/>
    <testCase name="createProduct should handle special characters and spaces in id and member names" duration="1"/>
    <testCase name="createProduct should handle a large number of members" duration="1"/>
    <testCase name="createProduct should handle empty strings as id and member names" duration="1"/>
    <testCase name="handleMemberToggle should add member to product when member is not selected" duration="1"/>
    <testCase name="handleMemberToggle should remove member from product when member is already selected" duration="1"/>
    <testCase name="handleMemberToggle should add product and member to selected options when product is not selected" duration="1"/>
    <testCase name="handleMemberToggle should add member to product when product is already selected but with no members" duration="1"/>
    <testCase name="handleMemberToggle should add member to product when product is already selected with other members" duration="2"/>
    <testCase name="addMemberToProduct should add a member to a product with no existing members" duration="1"/>
    <testCase name="addMemberToProduct should add a member to a product with existing members" duration="13"/>
    <testCase name="addMemberToProduct should return the original products array if memberId is undefined" duration="1"/>
    <testCase name="addMemberToProduct should return the original products array if memberId is already in the product" duration="1"/>
    <testCase name="removeMemberFromProduct should remove a member from a product with multiple members" duration="1"/>
    <testCase name="removeMemberFromProduct should remove a member from a product with only one member" duration="7"/>
    <testCase name="removeMemberFromProduct should handle removing a non-existent member from a product" duration="1"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/FormUpload.test.tsx">
    <testCase name="FormUpload renders without crashing" duration="39"/>
    <testCase name="FormUpload matches snapshot" duration="20"/>
    <testCase name="FormUpload should reset all state variables when handleReset is called" duration="64"/>
    <testCase name="handleFileChange should select a file and set the file type correctly" duration="3"/>
    <testCase name="handleFileChange should set an error message when the file size exceeds the maximum allowed size" duration="4"/>
    <testCase name="handleFileChange should set an error message when no file is selected" duration="1"/>
    <testCase name="handleFileChange should display an error message when selecting a file with an invalid extension" duration="4"/>
    <testCase name="FormUpload should display error message when selecting a file with an unsupported file type" duration="29"/>
    <testCase name="handleDrag should set dragActive to true when dragenter event is triggered" duration="3"/>
    <testCase name="handleDrag should set dragActive to true when dragover event is triggered" duration="3"/>
    <testCase name="handleDrag should set dragActive to false when dragleave event is triggered" duration="1"/>
    <testCase name="handleReset should reset upload data to an empty array" duration="1"/>
    <testCase name="handleReset should set status to null" duration="1"/>
    <testCase name="handleDrop should read and process a valid file when dropped" duration="2"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="4"/>
    <testCase name="handleDrop should read and process a file with a valid file type when dropped" duration="2"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="1"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="1"/>
    <testCase name="handleDrop should set an error message when the file type is not supported" duration="1"/>
    <testCase name="handleDrop should set the base64 image correctly when the file is read" duration="1"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/table/index.test.tsx">
    <testCase name="handleProductsDropdown should return an array of dropdown options based on the status parameter" duration="5"/>
    <testCase name="handleProductsDropdown should filter out options based on the isChecker parameter" duration="1"/>
    <testCase name="handleProductsDropdown should filter out options based on the permissions parameter" duration="2"/>
    <testCase name="TableComponent should render a table with headers and rows" duration="98"/>
    <testCase name="TableComponent should display a loading indicator when data is being fetched" duration="10"/>
    <testCase name="TextCellContent renders text content and dot correctly" duration="3"/>
    <testCase name="TextCellContent renders &quot;-&quot; when value is falsy" duration="5"/>
    <testCase name="ProductNameCellContent renders product code correctly" duration="3"/>
    <testCase name="ProductNameCellContent renders &quot;-&quot; when product code is falsy" duration="4"/>
    <testCase name="UpdatedOnCellContent should render the date and time in the correct format" duration="8"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is null or undefined" duration="3"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is not a valid date" duration="28"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is not a string or a date object" duration="4"/>
    <testCase name="UpdatedOnCellContent should render the date and time in the correct format for a different timezone" duration="4"/>
    <testCase name="StateCellContent should render a span element with the given value as its text content" duration="5"/>
    <testCase name="StateCellContent should apply a class to the span element based on the value passed to the function" duration="4"/>
    <testCase name="StatusCellContent should render a span element with the specific class based on the value passed as props" duration="14"/>
    <testCase name="StatusCellContent should call handleUserView function to determine the text content of the span element" duration="3"/>
    <testCase name="StatusCellContent should call handleColorState function to determine the background color of the span element" duration="34"/>
    <testCase name="StatusCellContent should render a span element with the default class and value as text content when the value passed as props does not match any of the cases in handleUserView and handleColorState" duration="6"/>
    <testCase name="StatusCellContent should default the isChecker prop to false if it is not a boolean" duration="3"/>
    <testCase name="StatusCellContent should render a FaEye icon next to the text content" duration="3"/>
    <testCase name="ActionsCellContent should render a DropdownButton component with the given dropDownOptions and onClick props" duration="33"/>
    <testCase name="ActionsCellContent should render a DropdownButton component with empty options when dropDownOptions prop is not provided" duration="200"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Button.test.tsx">
    <testCase name="Button renders without crashing" duration="21"/>
    <testCase name="Button renders children" duration="5"/>
    <testCase name="Button applies custom className" duration="4"/>
    <testCase name="Button can show loader" duration="7"/>
    <testCase name="Button can hide loader" duration="3"/>
    <testCase name="Button can render button elements" duration="3"/>
    <testCase name="Button calls onClick handler" duration="6"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/FormDate.test.tsx">
    <testCase name="FormDate component should update date on date change" duration="49"/>
    <testCase name="FormDate component should display error message when there is an error" duration="10"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/QuickLinks.test.tsx">
    <testCase name="QuickLinks should renderWithProviders a container with a title and a list of links" duration="90"/>
    <testCase name="QuickLinks component renderWithProviderss QuickLinks component with suggested links" duration="24"/>
    <testCase name="QuickLinks component closes the suggested links section when close button is clicked" duration="58"/>
    <testCase name="should renderWithProviders a message when isOpen state is true" duration="21"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/FormStepComponent.test.tsx">
    <testCase name="FormStepComponent should render the correct number of form step items when formStepItems is not empty" duration="29"/>
    <testCase name="FormStepComponent should render the correct label for each form step item when formStepItems is not empty" duration="8"/>
    <testCase name="FormStepComponent should render the correct index for each form step item when formStepItems is not empty" duration="21"/>
    <testCase name="FormStepComponent should handle empty formStepItems array and render default form step item" duration="5"/>
    <testCase name="FormStepComponent should handle step value greater than the number of formStepItems and render last form step item" duration="12"/>
    <testCase name="FormStepComponent should handle step value less than 1 and render first form step item" duration="10"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/FormTooltip.test.tsx">
    <testCase name="FormToolTip Renders without errors" duration="32"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/Sterling-investment.tsx">
    <testCase name="microfrontend bootstraps the app" duration="9"/>
    <testCase name="microfrontend mounts and unmounts" duration="29"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/TopBar.test.tsx">
    <testCase name="Tabs should render a list of tabs with titles and urls" duration="150"/>
    <testCase name="should set active tab and update search term" duration="93"/>
    <testCase name="renders TopBar component" duration="22"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/forms/Checkbox.test.tsx">
    <testCase name="Checkbox renders without crashing" duration="26"/>
    <testCase name="Checkbox matches snapshot" duration="10"/>
    <testCase name="Checkbox displays the label" duration="12"/>
    <testCase name="Checkbox initially renders unchecked" duration="52"/>
    <testCase name="Checkbox renders checked when checked prop is true" duration="8"/>
    <testCase name="Checkbox calls onChange when clicked" duration="12"/>
    <testCase name="Checkbox should not call onChange if not provided when handleChange is invoked" duration="11"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/investment/dashboard/TableComponent.test.tsx">
    <testCase name="handleDropdown should return an array of options based on the status, isChecker, locked, and permissions parameters" duration="7"/>
    <testCase name="handleDropdown should filter out &quot;deactivate&quot; and &quot;activate&quot; options if user does not have &quot;CREATE_PRODUCT&quot; permission" duration="2"/>
    <testCase name="handleDropdown should filter out &quot;modify&quot; option if user does not have &quot;CREATE_PRODUCT&quot; permission and is not a checker" duration="1"/>
    <testCase name="handleDropdown should return an array with only &quot;view&quot; option if locked parameter is true and &quot;view&quot; option exists" duration="1"/>
    <testCase name="handleDropdown should return an empty array if locked parameter is true and &quot;view&quot; option does not exist" duration="2"/>
    <testCase name="handleDropdown should return an array with only &quot;view&quot; option if isChecker parameter is true and &quot;view&quot; option exists" duration="1"/>
    <testCase name="handleHeaders should filter out &apos;created_by&apos; when isChecker is true" duration="1"/>
    <testCase name="handleHeaders should filter out &apos;approved_By&apos; when isChecker is false" duration="1"/>
    <testCase name="handleDownload should generate CSV for requests category" duration="6"/>
    <testCase name="handleDownload should generate CSV for product category" duration="2"/>
    <testCase name="handleDownload should not generate CSV if downloadData is empty" duration="1"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/Breadcrumbs.test.tsx">
    <testCase name="Breadcrumbs renders without crashing" duration="25"/>
    <testCase name="Breadcrumbs matches snapshot" duration="13"/>
    <testCase name="Breadcrumbs displays breadcrumb links" duration="19"/>
    <testCase name="Breadcrumbs Can click on links" duration="6"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/utils/test-util.test.tsx">
    <testCase name="renderWithProviders should render the UI with the Provider wrapper and the passed options" duration="23"/>
    <testCase name="renderWithProviders should return the store and the rendered UI" duration="7"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/assets/images/SubmitSvg.test.tsx">
    <testCase name="SubmitSvg Renders without error" duration="30"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/AppWrapper.test.tsx">
    <testCase name="AppWrapper Component renders children within the Provider component" duration="38"/>
  </file>
  <file path="/Users/work/Documents/retailcore-mfe-investment-management/src/__tests__/components/assets/images/Step.test.tsx">
    <testCase name="Step Renders without error" duration="23"/>
  </file>
</testExecutions>