<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/TopBar.test.tsx">
    <testCase name="Tabs should renderWithProviders a list of tabs with titles and urls" duration="474"/>
    <testCase name="should set active tab and update search term" duration="84"/>
    <testCase name="renderWithProviderss TopBar component" duration="53"/>
    <testCase name="getSearchResult should call getProducts with correct parameters and set search results" duration="16"/>
    <testCase name="getSearchResult should set search results to empty array when given empty string value" duration="2"/>
    <testCase name="Tabs should renderWithProviders tabs with correct titles and styles" duration="19"/>
    <testCase name="Tabs should update active tab and navigate to correct URL when a tab is clicked" duration="64"/>
    <testCase name="TopBar should renderWithProviders the top bar component without errors" duration="43"/>
    <testCase name="TopBar should display the Product Factory title" duration="68"/>
    <testCase name="TopBar should display the Create new product button" duration="26"/>
    <testCase name="TopBar should disable the Create new product button when permissions are not provided" duration="28"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/StatusCard.test.tsx">
    <testCase name="StatusCard Renders without error" duration="188"/>
    <testCase name="StatusButton Renders without error" duration="11"/>
    <testCase name="StatusButton Shows spinner while loading" duration="8"/>
    <testCase name="sortOptions Sorts and returns expected options in &apos;all products&apos; category" duration="29"/>
    <testCase name="sortOptions Sorts and returns expected options in &apos;requests&apos; category" duration="2"/>
    <testCase name="StatusCategoryButton Renders without error" duration="11"/>
    <testCase name="handleActiveType Sets status to &quot;&quot; when activeType === all " duration="2"/>
    <testCase name="handleActiveType Sets status according to various activeTypes" duration="5"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/FormUpload.test.tsx">
    <testCase name="FormUpload renders without crashing" duration="106"/>
    <testCase name="FormUpload matches snapshot" duration="52"/>
    <testCase name="FormUpload should reset all state variables when handleReset is called" duration="9"/>
    <testCase name="handleFileChange should select a file and set the file type correctly" duration="23"/>
    <testCase name="handleFileChange should set an error message when the file size exceeds the maximum allowed size" duration="2"/>
    <testCase name="handleFileChange should set an error message when no file is selected" duration="14"/>
    <testCase name="handleFileChange should display an error message when selecting a file with an invalid extension" duration="7"/>
    <testCase name="FormUpload should display error message when selecting a file with an unsupported file type" duration="54"/>
    <testCase name="handleDrag should set dragActive to true when dragenter event is triggered" duration="2"/>
    <testCase name="handleDrag should set dragActive to true when dragover event is triggered" duration="21"/>
    <testCase name="handleDrag should set dragActive to false when dragleave event is triggered" duration="2"/>
    <testCase name="handleReset should reset upload data to an empty array" duration="3"/>
    <testCase name="handleReset should set status to null" duration="1"/>
    <testCase name="handleDrop should read and process a valid file when dropped" duration="37"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="10"/>
    <testCase name="handleDrop should read and process a file with a valid file type when dropped" duration="5"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="3"/>
    <testCase name="handleDrop should process a file with a valid file type when dropped" duration="2"/>
    <testCase name="handleDrop should set an error message when the file type is not supported" duration="203"/>
    <testCase name="handleDrop should set the base64 image correctly when the file is read" duration="7"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/Select.test.tsx">
    <testCase name="Select renders without crashing" duration="84"/>
    <testCase name="Select matches snapshot" duration="36"/>
    <testCase name="Select shows the selected option" duration="29"/>
    <testCase name="Select opens the dropdown when clicked" duration="118"/>
    <testCase name="Select calls onChange when option selected" duration="184"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/table/index.test.tsx">
    <testCase name="handleProductsDropdown should return an array of dropdown options based on the status parameter" duration="13"/>
    <testCase name="handleProductsDropdown should filter out options based on the isChecker parameter" duration="1"/>
    <testCase name="handleProductsDropdown should filter out options based on the permissions parameter" duration="1"/>
    <testCase name="TableComponent should render a table with headers and rows" duration="205"/>
    <testCase name="TableComponent should display a loading indicator when data is being fetched" duration="16"/>
    <testCase name="TextCellContent renders text content and dot correctly" duration="4"/>
    <testCase name="TextCellContent renders &quot;-&quot; when value is falsy" duration="6"/>
    <testCase name="ProductNameCellContent renders product code correctly" duration="4"/>
    <testCase name="ProductNameCellContent renders &quot;-&quot; when product code is falsy" duration="4"/>
    <testCase name="UpdatedOnCellContent should render the date and time in the correct format" duration="21"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is null or undefined" duration="13"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is not a valid date" duration="149"/>
    <testCase name="UpdatedOnCellContent should render nothing when value is not a string or a date object" duration="29"/>
    <testCase name="UpdatedOnCellContent should render the date and time in the correct format for a different timezone" duration="12"/>
    <testCase name="StateCellContent should render a span element with the given value as its text content" duration="114"/>
    <testCase name="StateCellContent should apply a class to the span element based on the value passed to the function" duration="5"/>
    <testCase name="StatusCellContent should render a span element with the specific class based on the value passed as props" duration="14"/>
    <testCase name="StatusCellContent should call handleUserView function to determine the text content of the span element" duration="5"/>
    <testCase name="StatusCellContent should call handleColorState function to determine the background color of the span element" duration="79"/>
    <testCase name="StatusCellContent should render a span element with the default class and value as text content when the value passed as props does not match any of the cases in handleUserView and handleColorState" duration="10"/>
    <testCase name="StatusCellContent should default the isChecker prop to false if it is not a boolean" duration="5"/>
    <testCase name="StatusCellContent should render a FaEye icon next to the text content" duration="14"/>
    <testCase name="ActionsCellContent should render a DropdownButton component with the given dropDownOptions and onClick props" duration="63"/>
    <testCase name="ActionsCellContent should render a DropdownButton component with empty options when dropDownOptions prop is not provided" duration="314"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/DateSelect.test.tsx">
    <testCase name="DateSelect renders without errors" duration="596"/>
    <testCase name="DateSelect Shows datePicker on button click" duration="688"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/Pages/term-deposit/forms/accounting-entries-and-events.test.tsx">
    <testCase name="AccountingEntriesAndEvents Renders without error" duration="110"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/CustomInput.test.tsx">
    <testCase name="CustomInput Renders without errors" duration="41"/>
    <testCase name="CustomInput Renders maxLength div if MaxLength is specified" duration="10"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/ComboSelect.test.tsx">
    <testCase name="ComboSelect renders without crashing" duration="95"/>
    <testCase name="ComboSelect matches snapshot" duration="19"/>
    <testCase name="ComboSelect should open the dropdown when the button is clicked" duration="92"/>
    <testCase name="ComboSelect should update selected options when all products and their members are selected" duration="55"/>
    <testCase name="ComboSelect should update selected options when a product and its members are deselected" duration="23"/>
    <testCase name="ComboSelect should update selected options when all products and their members are deselected" duration="72"/>
    <testCase name="ComboSelect should filter the options correctly when searching for a product" duration="62"/>
    <testCase name="ComboSelect should update selected options when a product and its members are selected" duration="35"/>
    <testCase name="closeDropdown should set isOpen state to false when called with setIsOpen(false)" duration="2"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(undefined)" duration="8"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(null)" duration="15"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(0)" duration="1"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen(&quot;&quot;)" duration="3"/>
    <testCase name="closeDropdown should not throw an error when called with setIsOpen({})" duration="1"/>
    <testCase name="handleChange should add a new product to selOptions if it doesnt exist" duration="5"/>
    <testCase name="handleChange should remove a product from selOptions if it already exists" duration="1"/>
    <testCase name="productContainsMember should return true when the product contains the member" duration="1"/>
    <testCase name="productContainsMember should return false when the product does not contain the member" duration="10"/>
    <testCase name="productContainsMember should return false when the product is empty" duration="1"/>
    <testCase name="productContainsMember should return false when the member is empty" duration="2"/>
    <testCase name="productContainsMember should return false when the member is null" duration="1"/>
    <testCase name="addNewProduct should return a new array with the new product added to the end of the input array" duration="15"/>
    <testCase name="addNewProduct should not modify the input array" duration="1"/>
    <testCase name="addNewProduct should work with an empty input array" duration="4"/>
    <testCase name="createProduct should return an object with &quot;product&quot; and &quot;members&quot; properties when valid id and members are provided" duration="2"/>
    <testCase name="createProduct should return an object with an empty &quot;members&quot; array when no members are provided" duration="1"/>
    <testCase name="createProduct should handle special characters and spaces in id and member names" duration="1"/>
    <testCase name="createProduct should handle a large number of members" duration="1"/>
    <testCase name="createProduct should handle empty strings as id and member names" duration="1"/>
    <testCase name="handleMemberToggle should add member to product when member is not selected" duration="2"/>
    <testCase name="handleMemberToggle should remove member from product when member is already selected" duration="3"/>
    <testCase name="handleMemberToggle should add product and member to selected options when product is not selected" duration="1"/>
    <testCase name="handleMemberToggle should add member to product when product is already selected but with no members" duration="20"/>
    <testCase name="handleMemberToggle should add member to product when product is already selected with other members" duration="1"/>
    <testCase name="addMemberToProduct should add a member to a product with no existing members" duration="8"/>
    <testCase name="addMemberToProduct should add a member to a product with existing members" duration="23"/>
    <testCase name="addMemberToProduct should return the original products array if memberId is undefined" duration="5"/>
    <testCase name="addMemberToProduct should return the original products array if memberId is already in the product" duration="1"/>
    <testCase name="removeMemberFromProduct should remove a member from a product with multiple members" duration="2"/>
    <testCase name="removeMemberFromProduct should remove a member from a product with only one member" duration="1"/>
    <testCase name="removeMemberFromProduct should handle removing a non-existent member from a product" duration="1"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/investment/dashboard/TableComponent.test.tsx">
    <testCase name="handleDropdown should return an array of options based on the status, isChecker, locked, and permissions parameters" duration="27"/>
    <testCase name="handleDropdown should filter out &quot;deactivate&quot; and &quot;activate&quot; options if user does not have &quot;CREATE_PRODUCT&quot; permission" duration="2"/>
    <testCase name="handleDropdown should filter out &quot;modify&quot; option if user does not have &quot;CREATE_PRODUCT&quot; permission and is not a checker" duration="2"/>
    <testCase name="handleDropdown should return an array with only &quot;view&quot; option if locked parameter is true and &quot;view&quot; option exists" duration="1"/>
    <testCase name="handleDropdown should return an empty array if locked parameter is true and &quot;view&quot; option does not exist" duration="9"/>
    <testCase name="handleDropdown should return an array with only &quot;view&quot; option if isChecker parameter is true and &quot;view&quot; option exists" duration="2"/>
    <testCase name="handleHeaders should filter out &apos;created_by&apos; when isChecker is true" duration="2"/>
    <testCase name="handleHeaders should filter out &apos;approved_By&apos; when isChecker is false" duration="2"/>
    <testCase name="handleDownload should generate CSV for requests category" duration="16"/>
    <testCase name="handleDownload should generate CSV for product category" duration="2"/>
    <testCase name="handleDownload should not generate CSV if downloadData is empty" duration="1"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/Breadcrumbs.test.tsx">
    <testCase name="Breadcrumbs renders without crashing" duration="79"/>
    <testCase name="Breadcrumbs matches snapshot" duration="36"/>
    <testCase name="Breadcrumbs displays breadcrumb links" duration="77"/>
    <testCase name="Breadcrumbs Can click on links" duration="38"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/Dropdown.test.tsx">
    <testCase name="Dropdown renders without crashing" duration="91"/>
    <testCase name="Dropdown matches snapshot" duration="47"/>
    <testCase name="Dropdown selects the right icon" duration="20"/>
    <testCase name="Dropdown renders right icon when button is clicked" duration="255"/>
    <testCase name="Dropdown applies active class to the selected option" duration="93"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/modals/Confirm.test.tsx">
    <testCase name="Confirm renders without crashing" duration="77"/>
    <testCase name="Confirm should render a modal with the given text and subtext" duration="231"/>
    <testCase name="Confirm should render a cancel buttons  and a confirm button" duration="63"/>
    <testCase name="Confirm closes modal when cancel button 1 clicked" duration="174"/>
    <testCase name="Confirm Calls onCancel when cancel button 2 clicked" duration="178"/>
    <testCase name="Confirm should call onConfirm when confirm button is clicked" duration="63"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/modals/Approved.test.tsx">
    <testCase name="ApprovedSuccess Modal renders without crashing" duration="32"/>
    <testCase name="ApprovedSuccess Modal matches snapshot" duration="7"/>
    <testCase name="ApprovedSuccess Modal closes modal when cancel clicked" duration="425"/>
    <testCase name="ApprovedSuccess Modal calls onConfirm when form submitted" duration="82"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/modals/Status.test.tsx">
    <testCase name="Success Modal renders without crashing" duration="51"/>
    <testCase name="Success Modal matches snapshot" duration="18"/>
    <testCase name="Success Modal can close modal pathname !== /product-management" duration="238"/>
    <testCase name="Success Modal can close modal when canclose is true" duration="153"/>
    <testCase name="Prompt Modal renders without crashing" duration="17"/>
    <testCase name="Prompt Modal matches snapshot" duration="10"/>
    <testCase name="Prompt Modal can close modal pathname !== /product-management" duration="92"/>
    <testCase name="Prompt Modal can close modal when canclose is true" duration="83"/>
    <testCase name="Failed Modal matches snapshot" duration="14"/>
    <testCase name="Failed Modal can close modal pathname !== /product-management" duration="67"/>
    <testCase name="Failed Modal can close modal when canclose is true" duration="107"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/Loader.test.tsx">
    <testCase name="Breadcrumbs renders without crashing" duration="123"/>
    <testCase name="Breadcrumbs matches snapshot" duration="9"/>
    <testCase name="Loader should render Loader component when isOpen is true" duration="215"/>
    <testCase name="Loader should not render Loader component when isOpen is false" duration="30"/>
    <testCase name="Loader should not throw an error when setIsOpen is not provided" duration="106"/>
    <testCase name="Loader should spin the AiOutlineLoading icon when Loader component is rendered" duration="47"/>
    <testCase name="Loader should display the text prop in the Loader component" duration="182"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/CustomComboSelect.test.tsx">
    <testCase name="CustomComboSelect Renders without errors" duration="90"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/App.test.tsx">
    <testCase name="Test App Component If App is rendered wihout issues" duration="60"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/SearchInput.test.tsx">
    <testCase name="handleInputChange should call setInputValue with the event target value" duration="12"/>
    <testCase name="SearchInput should render search input field with default props" duration="55"/>
    <testCase name="SearchInput applies custom CSS classes" duration="11"/>
    <testCase name="SearchInput should update input field when user inputs a search term" duration="24"/>
    <testCase name="SearchInput should update input field when user inputs a search term and isTruncated is true" duration="16"/>
    <testCase name="closeBox should set search results to an empty array" duration="27"/>
    <testCase name="closeBox should set show box state to false" duration="4"/>
    <testCase name="closeBox should handle setSearchResults parameter not being a function" duration="58"/>
    <testCase name="closeBox should handle setShowBox parameter not being a function" duration="1"/>
    <testCase name="closeBox should handle multiple calls in a row" duration="20"/>
    <testCase name="SearchValues should call handleClick when search item is clicked" duration="17"/>
    <testCase name="SearchItem should render a div element with an empty className" duration="8"/>
    <testCase name="SearchItem should render a span element with the specified className when type is &quot;general&quot;" duration="22"/>
    <testCase name="SearchItem should render a div element when item.products.length &gt; 0" duration="21"/>
    <testCase name="SearchItem should render a div element when item is undefined" duration="7"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/Sterling-investment.tsx">
    <testCase name="microfrontend bootstraps the app" duration="26"/>
    <testCase name="microfrontend mounts and unmounts" duration="55"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/MultiRangeSlider.test.tsx">
    <testCase name="Slider renders without crashing" duration="75"/>
    <testCase name="Slider matches snapshot" duration="15"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/Checkbox.test.tsx">
    <testCase name="Checkbox renders without crashing" duration="70"/>
    <testCase name="Checkbox matches snapshot" duration="14"/>
    <testCase name="Checkbox displays the label" duration="10"/>
    <testCase name="Checkbox initially renders unchecked" duration="8"/>
    <testCase name="Checkbox renders checked when checked prop is true" duration="10"/>
    <testCase name="Checkbox calls onChange when clicked" duration="50"/>
    <testCase name="Checkbox should not call onChange if not provided when handleChange is invoked" duration="12"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/SelectedRequirementsTable.test.tsx">
    <testCase name="SelectedRequirementsTable Renders without errors" duration="121"/>
    <testCase name="SelectedRequirementsTable Renders selected requirement list" duration="14"/>
    <testCase name="SelectedRequirementsTable Shows message when list is empty" duration="28"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/BorderlessSelect.test.tsx">
    <testCase name="BorderlessSelect Renders without error" duration="146"/>
    <testCase name="BorderlessSelect Shows options when input is clicked" duration="153"/>
    <testCase name="BorderlessSelect indicates that input is required" duration="19"/>
    <testCase name="BorderlessSelect indicates error" duration="41"/>
    <testCase name="BorderlessSelect changes value when clicked and hides options" duration="86"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/ProductSearch.test.tsx">
    <testCase name="search input calls setSearchTerm function with debounce on input change" duration="233"/>
    <testCase name="classNames should concatenate all truthy class names into a single string" duration="3"/>
    <testCase name="classNames should ignore all falsy class names" duration="2"/>
    <testCase name="classNames should handle multiple truthy and falsy class names" duration="2"/>
    <testCase name="classNames should handle empty input" duration="1"/>
    <testCase name="classNames should handle input with only one truthy class name" duration="2"/>
    <testCase name="ProductSearch renders without crashing" duration="43"/>
    <testCase name="ProductSearch shows placeholder text" duration="25"/>
    <testCase name="ProductSearch filters options by search query" duration="32"/>
    <testCase name="ProductSearch renders the component with placeholder" duration="16"/>
    <testCase name="ProductSearch displays options when typing in the input" duration="58"/>
    <testCase name="ProductSearch applies the correct class when an option is active" duration="72"/>
    <testCase name="ProductSearch applies the correct class when an option is selected" duration="50"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/QuickLinks.test.tsx">
    <testCase name="QuickLinks should renderWithProviders a container with a title and a list of links" duration="213"/>
    <testCase name="QuickLinks component renderWithProviderss QuickLinks component with suggested links" duration="53"/>
    <testCase name="QuickLinks component closes the suggested links section when close button is clicked" duration="25"/>
    <testCase name="QuickLinks component should fetch data from useGetLinksQuery hook and update state with received data" duration="107"/>
    <testCase name="QuickLinks component should renderWithProviders a message when isOpen state is true" duration="26"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/ActivityLog.tsx">
    <testCase name="renders the ActivityLog component with loading state" duration="97"/>
    <testCase name="renders the ActivityLog component with no activities" duration="18"/>
    <testCase name="renders the ActivityLog component with activities" duration="21"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/DownloadButton.tsx">
    <testCase name="DownloadButton should call handleDownload function when button is clicked" duration="110"/>
    <testCase name="DownloadButton should display the text Download" duration="20"/>
    <testCase name="DownloadButton should not throw an error when handleDownload is not provided" duration="14"/>
    <testCase name="DownloadButton should have the correct class name, type attribute, text color, background color, and gap between icon and text" duration="11"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/ShareButton.test.tsx">
    <testCase name="ShareButton renders without crashing" duration="53"/>
    <testCase name="ShareButton triggers the share action when clicked" duration="31"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/InfoLabel.test.tsx">
    <testCase name="InfoLabel Renders without errors" duration="46"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/FormStepComponent.test.tsx">
    <testCase name="FormStepComponent should render the correct number of form step items when formStepItems is not empty" duration="60"/>
    <testCase name="FormStepComponent should render the correct label for each form step item when formStepItems is not empty" duration="21"/>
    <testCase name="FormStepComponent should render the correct index for each form step item when formStepItems is not empty" duration="8"/>
    <testCase name="FormStepComponent should handle empty formStepItems array and render default form step item" duration="6"/>
    <testCase name="FormStepComponent should handle step value greater than the number of formStepItems and render last form step item" duration="10"/>
    <testCase name="FormStepComponent should handle step value less than 1 and render first form step item" duration="15"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/forms/FormDate.test.tsx">
    <testCase name="FormDate component should update date on date change" duration="131"/>
    <testCase name="FormDate component should display error message when there is an error" duration="29"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/modals/SelectRequirements.test.tsx">
    <testCase name="SelectRequirements Does not show when &apos;isOpen&apos; == false" duration="42"/>
    <testCase name="SelectRequirements Shows when &apos;isOpen&apos; == true" duration="322"/>
    <testCase name="SelectRequirements Displays child component" duration="75"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/modals/Layout.test.tsx">
    <testCase name="Layout renders children and opens and closes the modal" duration="184"/>
    <testCase name="Layout should not render children when isOpen is false" duration="23"/>
    <testCase name="Layout should render dialog with correct data-testid" duration="100"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/CreateButton.test.tsx">
    <testCase name="closeButton should set isOpen state to false" duration="33"/>
    <testCase name="closeButton should set secondActive, thirdActive, and fourthActive states to empty strings" duration="4"/>
    <testCase name="closeButton should not return any value" duration="6"/>
    <testCase name="closeButton should require function parameters" duration="5"/>
    <testCase name="closeButton should not throw any errors" duration="2"/>
    <testCase name="goToUrl should navigate to the provided URL" duration="2"/>
    <testCase name="goToUrl should throw an error when url is null" duration="4"/>
    <testCase name="goToUrl should throw an error when navigate function is not a function" duration="49"/>
    <testCase name="goToUrl should handle relative URLs" duration="17"/>
    <testCase name="CreateButton should render the component without crashing" duration="80"/>
    <testCase name="CreateButton should open the dropdown menu when the button is clicked" duration="102"/>
    <testCase name="CreateButton should close the dropdown menu when clicked outside" duration="24"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/Button.test.tsx">
    <testCase name="Button renders without crashing" duration="57"/>
    <testCase name="Button renders children" duration="32"/>
    <testCase name="Button applies custom className" duration="22"/>
    <testCase name="Button can show loader" duration="11"/>
    <testCase name="Button can hide loader" duration="7"/>
    <testCase name="Button can render button elements" duration="4"/>
    <testCase name="Button calls onClick handler" duration="37"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/layouts/AuthGuard.test.tsx">
    <testCase name="AuthGuard shows content if authenticated" duration="45"/>
    <testCase name="should return children when isAuthenticated is true" duration="5"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/PreLoader.test.tsx">
    <testCase name="renders the PreLoader component" duration="27"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/convertKeysToLowerCase.test.tsx">
    <testCase name="convertKeysToLowerCase should convert all keys in a simple object to lowercase" duration="18"/>
    <testCase name="convertKeysToLowerCase should convert all keys in a nested object to lowercase" duration="2"/>
    <testCase name="convertKeysToLowerCase should return an empty object when given an empty object" duration="1"/>
    <testCase name="convertKeysToLowerCase should convert keys with one character to lowercase" duration="1"/>
    <testCase name="convertKeysToLowerCase should convert keys with all characters already lowercase" duration="9"/>
    <testCase name="convertKeysToLowerCase should convert keys with all characters already uppercase" duration="18"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/handleDropdown.test.tsx">
    <testCase name="handleDropdown should return an array of dropdown options when valid status and type are provided" duration="8"/>
    <testCase name="handleDropdown should return an empty array when an invalid status is provided" duration="10"/>
    <testCase name="handleDropdown should return an empty array when either status or type is falsy" duration="3"/>
    <testCase name="handleDropdown should return an array of options based on status and type" duration="12"/>
    <testCase name="handleDropdown should filter options based on permissions if CREATE_PRODUCT is not included" duration="3"/>
    <testCase name="handleDropdown should return an empty array if status is not found in firstLevel" duration="9"/>
    <testCase name="handleDropdown should return an empty array when either &quot;status&quot; or &quot;type&quot; is falsy" duration="4"/>
    <testCase name="handleDropdown should return an array of options based on &quot;status&quot; and &quot;type&quot;" duration="2"/>
    <testCase name="handleDropdown should filter options based on permissions if &quot;CREATE_PRODUCT&quot; is not included" duration="3"/>
    <testCase name="handleDropdown should return an empty array if &quot;selectedType&quot; is falsy" duration="33"/>
    <testCase name="handleDropdown should return an empty array if &quot;status&quot; is not found in &quot;DropDownOptions&quot;" duration="2"/>
    <testCase name="handleDropdown should return an empty array if &quot;type&quot; is not found in &quot;creationMap&quot;" duration="2"/>
    <testCase name="handleDropdown should return an empty array when status is falsy" duration="5"/>
    <testCase name="handleDropdown should return an empty array when type is falsy" duration="2"/>
    <testCase name="handleDropdown should return an array of options when type is in creationMap" duration="3"/>
    <testCase name="handleDropdown should return an array of options when type is not in creationMap" duration="5"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/BottomBarLoader.test.tsx">
    <testCase name="renders the BottomBarLoader component" duration="265"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/FormTooltip.test.tsx">
    <testCase name="FormToolTip Renders without errors" duration="74"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/handleColorState.test.tsx">
    <testCase name="handleColorState should return the correct color state for the value &quot;approved&quot;" duration="13"/>
    <testCase name="handleColorState should return the correct color state for the value &quot;A&quot;" duration="3"/>
    <testCase name="handleColorState should return the correct color state for the value &quot;in-review&quot;" duration="2"/>
    <testCase name="handleColorState should return the correct color state for the value &quot;P&quot;" duration="2"/>
    <testCase name="handleColorState should return the correct color state for the value &quot;in-issue&quot;" duration="2"/>
    <testCase name="handleColorState should return the correct color state for the value &quot;R&quot;" duration="2"/>
    <testCase name="handleColorState should return the correct color state for the value &quot;draft&quot;" duration="3"/>
    <testCase name="handleColorState should return the correct color state for the value &quot;D&quot;" duration="4"/>
    <testCase name="handleColorState should return the correct color state for the value &quot;I&quot;" duration="3"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/AppWrapper.test.tsx">
    <testCase name="AppWrapper Component renders children within the Provider component" duration="67"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/assets/images/Step.test.tsx">
    <testCase name="Step Renders without error" duration="44"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/checkEmpty.test.tsx">
    <testCase name="checkEmpty should return an empty array when all objects have all required properties" duration="27"/>
    <testCase name="checkEmpty should return an array with objects that have missing required properties" duration="2"/>
    <testCase name="checkEmpty should return an empty array when uploadData is empty" duration="2"/>
    <testCase name="checkEmpty should return an array with objects that have all required properties when uploadData contains only such objects" duration="1"/>
    <testCase name="checkEmpty should return an array with objects that have missing required properties when uploadData contains only such objects" duration="18"/>
    <testCase name="checkEmpty should return an array with objects that have missing required properties when uploadData contains objects with missing and objects with all required properties" duration="15"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/convertToDays.tsx">
    <testCase name="convertToDays should return the input duration when type is 1" duration="11"/>
    <testCase name="convertToDays should use the current date as a starting point for calculations" duration="3"/>
    <testCase name="convertToDays should throw an error when an invalid duration type is provided" duration="16"/>
    <testCase name="convertToDays should return 0 when duration is 0 and type is 2, 3 or 4" duration="3"/>
    <testCase name="convertToDays should return NaN when duration is NaN and type is 2, 3 or 4" duration="2"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/root.component.test.tsx">
    <testCase name="Root component should be in the document" duration="56"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/assets/images/SubmitSvg.test.tsx">
    <testCase name="SubmitSvg Renders without error" duration="46"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/assets/images/ModifySvg.test.tsx">
    <testCase name="ModifySvg Renders without error" duration="66"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/layouts/Layout.test.tsx">
    <testCase name="Layout renders AuthGuard and Outlet components" duration="46"/>
    <testCase name="handleRole should handle cases where is_superuser property is not a boolean" duration="7"/>
    <testCase name="handleRole should handle cases where is_superuser property is not a boolean" duration="2"/>
    <testCase name="handleRole should handle cases where is_superuser property is not present in user object" duration="2"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/isNewLocation.test.tsx">
    <testCase name="isNewLocation should return false when oldData is null" duration="7"/>
    <testCase name="isNewLocation should return false when oldData is undefined" duration="11"/>
    <testCase name="isNewLocation should return false when all properties match" duration="2"/>
    <testCase name="isNewLocation should return true when at least one property does not match" duration="2"/>
    <testCase name="isNewLocation should return true when newData is null" duration="6"/>
    <testCase name="isNewLocation should return true when oldData is null and newData is defined" duration="1"/>
    <testCase name="isNewLocation should return false when oldData and newData are both null" duration="12"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/test-util.test.tsx">
    <testCase name="renderWithProviders should render the UI with the Provider wrapper and the passed options" duration="94"/>
    <testCase name="renderWithProviders should return the store and the rendered UI" duration="5"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/parseQueryParams.test.tsx">
    <testCase name="parseQueryParams should return an instance of URLSearchParams when called with valid query params" duration="8"/>
    <testCase name="parseQueryParams should append all non-array query params to the URLSearchParams instance" duration="2"/>
    <testCase name="parseQueryParams should append all items in an array query param to the URLSearchParams instance" duration="3"/>
    <testCase name="parseQueryParams should set boolean query params to their corresponding key in the URLSearchParams instance" duration="2"/>
    <testCase name="parseQueryParams should handle an empty query params object" duration="14"/>
    <testCase name="parseQueryParams should handle a query params object with null or undefined values" duration="2"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/capitalizeFirstLetter.test.tsx">
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a string with one word" duration="13"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of the first word in a string with multiple words" duration="2"/>
    <testCase name="capitalizeFirstLetter should return an empty string if the input is an empty string" duration="2"/>
    <testCase name="capitalizeFirstLetter should return the input if its not a string" duration="1"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a string with only one letter" duration="13"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a string with non-alphabetic characters after the first letter" duration="2"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a string with numbers as the first letter" duration="2"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a string with a non-ASCII character as the first letter" duration="1"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a string with a non-ASCII character after the first letter" duration="2"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a string with multiple spaces between words" duration="5"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a non-empty string" duration="2"/>
    <testCase name="capitalizeFirstLetter should not modify an empty string" duration="20"/>
    <testCase name="capitalizeFirstLetter should return the input if it&apos;s not a string" duration="1"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of a single-word string" duration="2"/>
    <testCase name="capitalizeFirstLetter should capitalize the first letter of each word in a sentence" duration="1"/>
    <testCase name="capitalizeFirstLetter should not modify a string with only non-alphabetic characters" duration="6"/>
    <testCase name="capitalizeFirstLetter should handle mixed case strings" duration="1"/>
    <testCase name="capitalizeFirstLetter should return a string with the first letter capitalized when input is a non-empty string" duration="1"/>
    <testCase name="capitalizeFirstLetter should return an empty string when input is an empty string" duration="1"/>
    <testCase name="capitalizeFirstLetter should return the input when it is not a string" duration="1"/>
    <testCase name="capitalizeFirstLetter should return the input when it is null" duration="1"/>
    <testCase name="capitalizeFirstLetter should return the input when it is undefined" duration="1"/>
    <testCase name="capitalizeFirstLetter should return the input when it is a number" duration="1"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/lowerObjectKeys.test.tsx">
    <testCase name="lowerObjectKeys should return an empty array when given an empty array" duration="10"/>
    <testCase name="lowerObjectKeys should return an array of objects with lowerd keys when given an array of objects with lowercase keys" duration="2"/>
    <testCase name="lowerObjectKeys should throw an error when given a non-array input" duration="9"/>
    <testCase name="lowerObjectKeys should return an array of objects with lowerd keys when given an array of objects with mixed case keys" duration="2"/>
    <testCase name="lowerObjectKeys should return an array of objects with lowerd keys when given an array of objects with only one key" duration="2"/>
    <testCase name="lowerObjectKeys should return an array of objects with lowerd keys when given an array of objects with only non-string keys" duration="1"/>
    <testCase name="lowerObjectKeys should handle objects without own properties" duration="3"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/formatCurrency.test.tsx">
    <testCase name="formatCurrency should format a price with default parameters" duration="48"/>
    <testCase name="formatCurrency should format a price with custom fraction and currency parameters" duration="2"/>
    <testCase name="formatCurrency should format a price with custom fraction, currency, and price parameters" duration="3"/>
    <testCase name="formatCurrency should format a price with a price of 0" duration="2"/>
    <testCase name="formatCurrency should format a price with a negative price" duration="10"/>
    <testCase name="currencyFormatter should format a positive integer value with default currency and symbol" duration="2"/>
    <testCase name="currencyFormatter should format a negative float value with specified currency and symbol" duration="2"/>
    <testCase name="currencyFormatter should format a zero value with specified currency and symbol" duration="2"/>
    <testCase name="currencyFormatter should format a value with more than two decimal places" duration="1"/>
    <testCase name="currencyFormatter should format a value with less than two decimal places" duration="5"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/assets/images/CancelSvg.test.tsx">
    <testCase name="CancelSvg Renders without error" duration="34"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/removeNullFromObj.test.tsx">
    <testCase name="removeNullEmptyKeys should return an empty object when the input object is empty" duration="10"/>
    <testCase name="removeNullEmptyKeys should return the same object when it has no null, undefined, empty string, or empty array values" duration="2"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/assets/images/excel.test.tsx">
    <testCase name="ModifySvg Renders without error" duration="99"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/sortTabStatus.test.tsx">
    <testCase name="sortTabStatus should return the id of the status object when the category is &quot;Requests&quot; and the value matches a status object type" duration="12"/>
    <testCase name="sortTabStatus should return the id of the status object when the category is &quot;StatusTypes&quot; and the value matches a status object type" duration="13"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/cleanObject.test.tsx">
    <testCase name="cleanObject should return an empty object when passed an empty object" duration="15"/>
    <testCase name="cleanObject should return an object with all non-null, non-undefined, and non-empty string values" duration="2"/>
    <testCase name="cleanObject should return an object with all non-null, non-undefined, and non-empty values of different types" duration="1"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/downloadFile.test.tsx">
    <testCase name="downloadUsingFetch should download file" duration="20"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/handleUserView.test.tsx">
    <testCase name="handleUserView should return &quot;in-review&quot; when value is &quot;P&quot; and checker is false" duration="9"/>
    <testCase name="handleUserView should return &quot;pending&quot; when value is &quot;P&quot; and checker is true" duration="1"/>
    <testCase name="handleUserView should return &quot;draft&quot; when value is &quot;D&quot;" duration="2"/>
    <testCase name="handleUserView should return &quot;approved&quot; when value is &quot;A&quot;" duration="1"/>
    <testCase name="handleUserView should return &quot;in-issue&quot; when value is &quot;I&quot; and checker is false" duration="2"/>
    <testCase name="handleUserView should return &quot;rejected&quot; when value is &quot;I&quot; and checker is true" duration="14"/>
    <testCase name="handleUserView should return &quot;in-issue&quot; when value is &quot;R&quot; and checker is false" duration="1"/>
    <testCase name="handleUserView should return &quot;rejected&quot; when value is &quot;R&quot; and checker is true" duration="2"/>
    <testCase name="handleUserView should return valye when value is &quot;T&quot; and checker is true" duration="1"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/countDuplicates.test.tsx">
    <testCase name="countDuplicates should return 0 when there are no duplicates in the array" duration="13"/>
    <testCase name="countDuplicates should return the correct number of duplicates when there are duplicates in the array" duration="2"/>
    <testCase name="countDuplicates should handle arrays with multiple types of elements" duration="2"/>
    <testCase name="countDuplicates should return 0 when the array is empty" duration="1"/>
    <testCase name="countDuplicates should handle arrays with only one element" duration="2"/>
    <testCase name="countDuplicates should handle arrays with only duplicate elements" duration="6"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/ucObjectKeys.test.tsx">
    <testCase name="ucObjectKeys should throw an error when the input is not an array" duration="10"/>
    <testCase name="ucObjectKeys should handle an array with non-object elements as input" duration="2"/>
    <testCase name="ucObjectKeys should capitalize the keys of an array of objects with different keys" duration="2"/>
    <testCase name="ucObjectKeys should capitalize the keys of an array of objects with same keys" duration="2"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/capitalizeObjectKeys.test.tsx">
    <testCase name="capitalizeObjectKeys should return an empty array when given an empty array" duration="18"/>
    <testCase name="capitalizeObjectKeys should return an array of objects with capitalized keys when given an array of objects with lowercase keys" duration="2"/>
    <testCase name="capitalizeObjectKeys should throw an error when given a non-array input" duration="10"/>
    <testCase name="capitalizeObjectKeys should return an array of objects with capitalized keys when given an array of objects with mixed case keys" duration="1"/>
    <testCase name="capitalizeObjectKeys should return an array of objects with capitalized keys when given an array of objects with only one key" duration="2"/>
    <testCase name="capitalizeObjectKeys should return an array of objects with capitalized keys when given an array of objects with only non-string keys" duration="2"/>
    <testCase name="capitalizeObjectKeys should handle objects without own properties" duration="2"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/getPercentage.test.tsx">
    <testCase name="getPercentage should return the correct percentage when total and success are positive integers" duration="17"/>
    <testCase name="getPercentage should return 100 when success is equal to total" duration="2"/>
    <testCase name="getPercentage should return 0 when success is equal to 0" duration="2"/>
    <testCase name="getPercentage should return the correct percentage when success is less than total" duration="2"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/utils/requestType.test.tsx">
    <testCase name="getRequestType should return &quot;bulk creation&quot; when type is &quot;BULK_CREATE&quot;" duration="7"/>
    <testCase name="getRequestType should return &quot;creation&quot; when type is &quot;CREATE&quot;" duration="2"/>
    <testCase name="getRequestType should return &quot;deactivation&quot; when type is &quot;DEACTIVATE&quot;" duration="2"/>
    <testCase name="getRequestType should return &quot;reactivation&quot; when type is &quot;REACTIVATE&quot;" duration="1"/>
    <testCase name="getRequestType should return &quot;modification&quot; when type is &quot;CHANGE&quot;" duration="2"/>
    <testCase name="getRequestType should return &quot;configuration&quot; when type is &quot;CONFIGURATION&quot;" duration="2"/>
  </file>
  <file path="/Users/user/Documents/GitHub/retailcore-mfe-investment-management/src/__tests__/components/ui/CascadingDropdown.test.tsx">
    <testCase name="CascadingDropdown should render a dropdown button with a label and a list of items" duration="50"/>
    <testCase name="CascadingDropdown should display the list of items when the dropdown button is clicked" duration="9"/>
    <testCase name="CascadingDropdown should allow the user to click on an item and navigate to its link" duration="8"/>
    <testCase name="CascadingDropdown should render a dropdown button with a default label when no label is provided" duration="8"/>
    <testCase name="CascadingDropdown should render a dropdown button with default classes when no classes are provided" duration="9"/>
    <testCase name="CascadingDropdown should render a dropdown button with no items when no items are provided" duration="9"/>
  </file>
</testExecutions>